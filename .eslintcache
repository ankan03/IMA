[{"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\index.js":"1","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\serviceWorker.js":"2","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\App.js":"3","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\theme.js":"4","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\constants.js":"5","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\views\\CollectorDashboard.js":"6","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Footer.js":"7","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\MyHeaderSection.js":"8","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\Grid_Header.js":"9","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\Grid_Table_Area.js":"10","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\EditButton.js":"11","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\DeleteButton.js":"12","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\AddButton.js":"13","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\EditPopUp.js":"14","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\DeletePopUp.js":"15","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\MyPopUp.js":"16","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\ViewCorrospondancePopUp.js":"17","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\VC.js":"18","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\GeneratePdf.js":"19"},{"size":776,"mtime":1589950107326,"results":"20","hashOfConfig":"21"},{"size":5226,"mtime":1589284044061,"results":"22","hashOfConfig":"21"},{"size":1309,"mtime":1616200759189,"results":"23","hashOfConfig":"21"},{"size":475,"mtime":1616160336280,"results":"24","hashOfConfig":"21"},{"size":144,"mtime":1616160037445,"results":"25","hashOfConfig":"21"},{"size":6550,"mtime":1610991213040,"results":"26","hashOfConfig":"21"},{"size":1243,"mtime":1589331154773,"results":"27","hashOfConfig":"21"},{"size":1881,"mtime":1616376847877,"results":"28","hashOfConfig":"21"},{"size":4132,"mtime":1616482268203,"results":"29","hashOfConfig":"21"},{"size":40526,"mtime":1616536022934,"results":"30","hashOfConfig":"21"},{"size":714,"mtime":1616224820915,"results":"31","hashOfConfig":"21"},{"size":726,"mtime":1616224839849,"results":"32","hashOfConfig":"21"},{"size":1313,"mtime":1616377689131,"results":"33","hashOfConfig":"21"},{"size":11586,"mtime":1616533035341,"results":"34","hashOfConfig":"21"},{"size":5437,"mtime":1616532941981,"results":"35","hashOfConfig":"21"},{"size":22773,"mtime":1616523463219,"results":"36","hashOfConfig":"21"},{"size":6756,"mtime":1616388794087,"results":"37","hashOfConfig":"21"},{"size":9941,"mtime":1616536019233,"results":"38","hashOfConfig":"21"},{"size":4603,"mtime":1616536164592,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"w9803v",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"43"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"43"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"43"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"43"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"43"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"43"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\index.js",["92","93"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport theme from '../src/utils/theme';\r\nimport { withStyles, MuiThemeProvider } from '@material-ui/core/styles';\r\nReactDOM.render(\r\n    <MuiThemeProvider theme={theme}>\r\n      <App />\r\n    </MuiThemeProvider>,\r\n  document.getElementById('root')\r\n);\r\n/*\r\nCRACKED BY ILLUMINATI\r\nTRUST US AND UNCOMMENT THIS CODE ONCE YOU SETUP YOUR REDUX STORE ;-)\r\n ReactDOM.render(\r\n   <Provider store={store}>\r\n     <MuiThemeProvider theme={theme}>\r\n       <App />\r\n     </MuiThemeProvider>\r\n   </Provider>,\r\n   document.getElementById('root')\r\n );\r\n*/\r\nserviceWorker.unregister();\r\n\r\n\r\n",["94","95"],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\serviceWorker.js",[],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\App.js",["96","97","98","99","100","101"],"import React from 'react';\r\nimport './App.css';\r\nimport theme from '../src/utils/theme';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport CollectorDashboard from '../src/views/CollectorDashboard';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { ROLL_NUMBER } from '../src/utils/constants';\r\nimport MyHeaderSection from './MyComponent/MyHeaderSection'\r\n// import MyHeaderSection from './assets/Group 20399.svg'\r\n\r\n\r\n// const useStyles = makeStyles((theme) => ({\r\n//   '@global': {\r\n//     '*::-webkit-scrollbar': {\r\n//       width: '0.4em',\r\n//       height: '0.4em',\r\n//     },\r\n//     '*::-webkit-scrollbar-track': {\r\n//       '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\r\n//     },\r\n//     '*::-webkit-scrollbar-thumb': {\r\n//       backgroundColor: '#6D7183',\r\n//       outline: '1px solid slategrey',\r\n//     },\r\n//   },\r\n//   mainBackground: {\r\n//     background: theme.palette.primary.main,\r\n//     height: '100vh',\r\n//     width: '100vw',\r\n//     overflow: 'hidden',\r\n//   },\r\n//   root: {\r\n//     flexGrow: 1,\r\n//   },\r\n//   paper: {\r\n//     height: 140,\r\n//     width: 100,\r\n//   },\r\n// }));\r\nconst App = () => {\r\n  console.log('theme', theme);\r\n\r\n  return (\r\n    <div >\r\n      <MyHeaderSection />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\theme.js",[],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\utils\\constants.js",[],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\views\\CollectorDashboard.js",["102","103","104","105","106"],"import React, { useState } from 'react';\r\nimport theme, { pxToVh } from '../utils/theme';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Footer from '../components/Footer';\r\nimport { Typography } from '@material-ui/core';\r\nimport { InputBase, TextField, OutlinedInput, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingLeft: '1vw',\r\n    paddingRight: '1vw',\r\n  },\r\n  textStyle1: {\r\n    color: '#FFFFFFA6',\r\n    fontSize: '2.5vw',\r\n    marginTop: '2vh',\r\n  },\r\n  textStyle2: {\r\n    color: '#FFFFFFA6',\r\n    fontSize: '1.5vw',\r\n  },\r\n  textfield: {\r\n    color: '#FFFFFFA6',\r\n    fontSize: '1.5vw',\r\n  },\r\n  nameInput: {\r\n    fontSize: '1vw',\r\n    color: '#FFFFFF',\r\n  },\r\n  notchedOutline: { borderWidth: '1px', borderColor: '#5DAAE0 !important' },\r\n  searchBtnStarted: {\r\n    marginTop: '8vh',\r\n    minWidth: '5vw',\r\n    minHeight: '2.188vw',\r\n    fontSize: '0.95vw',\r\n    border: 'solid 0.75px #3B617C',\r\n    // marginRight: '0.5rem',\r\n    alignSelf: 'center',\r\n    color: '#5DAAE0',\r\n    '&:hover': {\r\n      backgroundColor: '#5daae0',\r\n      color: 'white',\r\n    },\r\n  },\r\n  searchBtnDisabled: {\r\n    minWidth: '5vw',\r\n    minHeight: '2.188vw',\r\n    fontSize: '0.95vw',\r\n    border: 'solid 0.75px #3B617C',\r\n    // marginRight: '0.5rem',\r\n    alignSelf: 'center',\r\n    color: 'white !important',\r\n    background: '#FFFFFFa5',\r\n    '&:hover': {\r\n      cursor: 'default',\r\n      backgroundColor: '#FFFFFFa5',\r\n    },\r\n  },\r\n  hellotext: {\r\n    fontSize: '4vw',\r\n    color: '#FFFFFFA6',\r\n    height: '10vh',\r\n  },\r\n  hellotext1: {\r\n    fontSize: '2.5vw',\r\n    marginTop: '5vh',\r\n    padding: '1vh',\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#5DAAE0',\r\n  },\r\n  hellotext3: {\r\n    fontSize: '1vw',\r\n    marginTop: '5vh',\r\n    padding: '0.5vh',\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#5DAAE0',\r\n  },\r\n  hellotext2: {\r\n    fontSize: '1.2vw',\r\n    marginTop: '5vh',\r\n    padding: '1vh',\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#5DAAE0',\r\n  },\r\n  hellotext4: {\r\n    fontSize: '1.5vw',\r\n    marginTop: '2vh',\r\n    padding: '1vh',\r\n    color: '#FFFFFF',\r\n  },\r\n  searchBtn: {\r\n    marginTop: '2vh',\r\n    minWidth: '5vw',\r\n    minHeight: '2.188vw',\r\n    fontSize: '0.95vw',\r\n    border: 'solid 0.75px #3B617C',\r\n    // marginRight: '0.5rem',\r\n    alignSelf: 'center',\r\n    color: '#5DAAE0',\r\n    '&:hover': {\r\n      backgroundColor: '#5daae0',\r\n      color: 'white',\r\n    },\r\n  },\r\n}));\r\n\r\nconst CollectorDashboard = (props) => {\r\n  const [name, setName] = useState('');\r\n  const [started, setStarted] = useState(false);\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleGetStarted = (e) => {\r\n    if (started) setName('');\r\n    setStarted((prev) => !prev);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container className={classes.root} spacing={2} xs={12}>\r\n      <Grid\r\n        container\r\n        style={{ height: '95vh' }}\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid\r\n          item\r\n          style={{\r\n            height: started ? '90vh' : '45vh',\r\n            width: started ? '60vw' : '40vw',\r\n            backgroundColor: started ? '' : '#252C48',\r\n            display: 'flex',\r\n          }}\r\n          alignItems=\"center\"\r\n          direction=\"column\"\r\n        >\r\n          <Typography className={classes.textStyle1}>\r\n            {started ? `Hello ${name}` : 'Hey There !'}\r\n          </Typography>\r\n          <Typography className={classes.textStyle2}>\r\n            {started\r\n              ? ' WELCOME TO SUMMER INTERNSHIP 2021'\r\n              : `What's your name?`}\r\n          </Typography>\r\n          {!started ? (\r\n            <>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                autoid=\"ship-to-input\"\r\n                type=\"text\"\r\n                style={{ marginTop: '4vh' }}\r\n                value={name}\r\n                onChange={handleNameChange}\r\n                InputProps={{\r\n                  classes: {\r\n                    input: classes.nameInput,\r\n                    notchedOutline: classes.notchedOutline,\r\n                  },\r\n                }}\r\n              />\r\n\r\n              <Button\r\n                size=\"small\"\r\n                className={classes.searchBtnStarted}\r\n                classes={{ disabled: classes.searchBtnDisabled }}\r\n                disabled={name == ''}\r\n                onClick={handleGetStarted}\r\n              >\r\n                GET STARTED\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  height: '30vh',\r\n                  width: '51vw',\r\n                  marginTop: '5vh',\r\n                  border: 'solid 1px #5daae0',\r\n                }}\r\n              >\r\n                <Button\r\n                  size=\"medium\"\r\n                  className={classes.searchBtn}\r\n                  onClick={handleGetStarted}\r\n                >\r\n                  CLICK HERE TO GET THE COMPLETE SOURCE CODE OF THE PROJECT\r\n                </Button>\r\n                <Button\r\n                  size=\"medium\"\r\n                  className={classes.searchBtn}\r\n                  onClick={handleGetStarted}\r\n                >\r\n                  CLICK HERE TO BRIBE YOUR MODERATOR DURING EVALUATION\r\n                </Button>\r\n\r\n                <Button\r\n                  size=\"medium\"\r\n                  className={classes.searchBtn}\r\n                  onClick={handleGetStarted}\r\n                >\r\n                  CLICK HERE TO GET ALL UPCOMING QUIZ ANSWERS BEFOREHAND\r\n                </Button>\r\n              </div>\r\n              <Typography className={classes.hellotext3}>\r\n                WITH LOTS OF LOVE,\r\n              </Typography>\r\n              <Typography className={classes.hellotext4}>\r\n                Highradius Illuminati\r\n              </Typography>\r\n              <Typography className={classes.hellotext2}>\r\n                THE ILLUMINATI WILL BE THERE WITH YOU ALWAYS...AND WILL HELP YOU\r\n                WHENEVER YOU ARE STUCK. MAY THE FORCE BE WITH YOU\r\n              </Typography>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <Footer />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CollectorDashboard;\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\components\\Footer.js",["107","108","109"],"import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport theme, { pxToRem } from '../utils/theme';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n  mainBackground: {\r\n    background: theme.palette.primary.main,\r\n    height: '100vh',\r\n    width: '100vw'\r\n  },\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: '100%',\r\n    background: '#252C48',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column'\r\n  },\r\n  titleName: { fontSize: pxToRem(30), color: 'white' },\r\n  subTitleName: {\r\n    fontSize: pxToRem(20),\r\n    color: 'white'\r\n  }\r\n});\r\nfunction Footer(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      style={{\r\n        display: 'flex',\r\n        marginRight: '5px',\r\n        justifyContent: 'flex-end',\r\n        height: \"4.5vh\",\r\n        alignItems: \"flex-end\"\r\n      }}\r\n    >\r\n      <Typography style={{ color: 'white' }}>\r\n        Copyright 2020 Highradius. All Rights Reserved.\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Footer);\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\MyHeaderSection.js",["110","111","112","113","114","115","116","117","118","119","120"],"import React from 'react'\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid_Header from './Grid_Header';\r\nimport { pxToRem } from '../utils/theme';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n            // width: 128 px,\r\n            // height: 128 px,\r\n            // margin: 8 px,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: 'center',\r\n            color: theme.palette.text.secondary,\r\n        },\r\n\r\n    }),\r\n\r\n);\r\n\r\n// const theme = createMuiTheme({\r\n//     overrides: {\r\n//         // Style sheet name ⚛️\r\n//         MuiButton: {\r\n//             // Name of the rule\r\n//             text: {\r\n//                 // Some CSS\r\n//                 color: 'white',\r\n//             },\r\n//         },\r\n//     },\r\n// });\r\n\r\nfunction MyHeaderSection() {\r\n    const classes = useStyles();\r\n    return (\r\n        // <div className={classes.root}>\r\n\r\n        //     <Typography variant=\"h5\" display='block' align='center'>\r\n        //         ABC Products\r\n        //     </Typography>\r\n\r\n        //     <Typography variant=\"h6\" display='block' align='left'>\r\n        //         Invoice List\r\n        //     </Typography>\r\n\r\n        //     {/* <OverridesCss /> */}\r\n\r\n        //     <Grid_Header />\r\n\r\n        // </div>\r\n        <div>\r\n            <Grid_Header />\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default MyHeaderSection\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\Grid_Header.js",["121","122","123","124","125","126","127","128","129","130","131","132","133","134"],"import React from 'react'\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport Grid_Table_Area from './Grid_Table_Area';\r\nimport { red } from '@material-ui/core/colors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport productLogo from '../assets/productLogo.svg';\r\nimport companyLogo from '../assets/logo.svg';\r\nimport '../App.css'\r\nconst theme = createMuiTheme({\r\n    overrides: {\r\n        // Style sheet name \r\n        MuiGrid: {\r\n            // Name of the rule\r\n            item: {\r\n                paddingTop: '3vh',\r\n                display: 'flex',\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\n// const useStyles = makeStyles((theme: Theme) =>\r\n//     createStyles({\r\n//         root: {\r\n//             display: 'flex',\r\n//             paddingLeft: '1vw',\r\n//             paddingRight: '1vw',\r\n//             '& > *': {\r\n//                 margin: theme.spacing(1),\r\n//                 width: theme.spacing(16),\r\n//                 height: theme.spacing(16),\r\n//             },\r\n//         },\r\n\r\n//         paper1: {\r\n//             width: '100vw',\r\n//             height: '90vh',\r\n//             background: '#273D49CC',\r\n//         },\r\n//         buttonPredict: {\r\n//             backgroundColor: '#97A1A9',\r\n//             marginLeft: '2vw',\r\n//             marginTop: '3vh',\r\n//             borderRadius: '.5em'\r\n//         },\r\n//         buttonViewCorrospondance: {\r\n//             marginLeft: '1vw',\r\n//             marginTop: '3vh',\r\n//             borderRadius: '.5em',\r\n//             color: '#97A1A9',\r\n//             border: '1px solid #97A1A9'\r\n//         },\r\n//         buttonAdd: {\r\n\r\n//             color: '#FFFFFF',\r\n//             marginLeft: '31vw',\r\n//             marginTop: '3vh',\r\n//             borderRadius: '.5em',\r\n//             border: '1px solid #14AFF1'\r\n//         },\r\n//         buttonEdit: {\r\n//             marginLeft: '1vw',\r\n//             marginTop: '3vh',\r\n//             borderRadius: '.5em',\r\n//             color: '#97A1A9',\r\n//             border: '1px solid #97A1A9'\r\n//         },\r\n//         buttonDelete: {\r\n//             marginLeft: '1vw',\r\n//             marginTop: '3vh',\r\n//             borderRadius: '.5em',\r\n//             color: '#97A1A9',\r\n//             border: '1px solid #97A1A9'\r\n//         },\r\n//         textFieldSearch: {\r\n//             marginLeft: '1vw',\r\n//             marginTop: '3vh',\r\n//             borderRadius: '.5em',\r\n//             color: '#97A1A9',\r\n//             height: '1vh',\r\n\r\n\r\n\r\n\r\n//         },\r\n//     }),\r\n// );\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n\r\n}));\r\n\r\nfunction Grid_Header() {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className=\"root\">\r\n            <Grid container >\r\n                <ThemeProvider theme={theme}>\r\n                    <Grid item xs={5} sm={5} md={5} lg={5} xl={5} >\r\n                        <img src={productLogo} alt=\"\" className='App-logo1' />\r\n                    </Grid>\r\n                    <Grid item xs={7} sm={7} md={7} lg={7} xl={7}>\r\n                        <img src={companyLogo} alt=\"\" className='' />\r\n                    </Grid>\r\n                </ThemeProvider>\r\n\r\n            </Grid>\r\n\r\n            <h2 style={{ color: 'white', padding: 0, marginLeft: 0, marginBlockStart: '10px', marginBlockEnd: '10px', fontWeight: 'normal' }}>Invoice List</h2>\r\n\r\n            <Grid_Table_Area />\r\n\r\n            <br />\r\n        </div>\r\n\r\n\r\n\r\n        // <div>\r\n        //     <Grid_Table_Area />\r\n\r\n        // </div>\r\n    );\r\n}\r\n\r\nexport default Grid_Header\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\Grid_Table_Area.js",["135","136","137","138","139","140","141","142","143","144"],"// import React, { useEffect, useState } from 'react';\r\n// import { withStyles, makeStyles } from '@material-ui/core/styles';\r\n// import Table from '@material-ui/core/Table';\r\n// import TableBody from '@material-ui/core/TableBody';\r\n// import TableCell from '@material-ui/core/TableCell';\r\n// import TableContainer from '@material-ui/core/TableContainer';\r\n// import TableHead from '@material-ui/core/TableHead';\r\n// import TableRow from '@material-ui/core/TableRow';\r\n// import Paper from '@material-ui/core/Paper';\r\n// import Checkbox from \"@material-ui/core/Checkbox\";\r\n// import Button from '@material-ui/core/Button';\r\n// import Input from '@material-ui/core/Input';\r\n// import SearchIcon from '@material-ui/icons/Search';\r\n// import { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n// import InfiniteScroll from \"react-infinite-scroll-component\";\r\n// import { CircularProgress } from \"@material-ui/core\";\r\n// import AddIcon from '@material-ui/icons/Add';\r\n// import MyPopUp from './MyPopUp';\r\n// import RemoveIcon from '@material-ui/icons/Remove';\r\n// import EditIcon from '@material-ui/icons/Edit';\r\n// import EditPopUp from './EditPopUp';\r\n// import DeletePopUp from './DeletePopUp';\r\n// import ViewCorrospondancePopUp from './ViewCorrospondancePopUp';\r\n// import axios from 'axios'\r\n\r\n// const themeCheckBox = createMuiTheme({\r\n//     overrides: {\r\n//         MuiTableCell: {\r\n//             root: {\r\n//                 borderBottom: \"none\"\r\n//             },\r\n//         },\r\n//     },\r\n// });\r\n\r\n// const StyledTableCell = withStyles((theme) => ({\r\n//     root: {\r\n//         borderBottom: \"none\"\r\n//     },\r\n//     head: {\r\n//         backgroundColor: \"#2E4350\",\r\n//         color: theme.palette.common.white,\r\n//         borderBottom: '2px solid #283A46',\r\n//         fontSize: '0.9vw',\r\n//         color: '#97A1A9',\r\n//         paddingTop: '0px',\r\n//         paddingBottom: '0px',\r\n//     },\r\n//     body: {\r\n//         fontSize: '1.1vw',\r\n//         color: 'white',\r\n//         paddingTop: '0px',\r\n//         paddingBottom: '0px',\r\n//     },\r\n// }))(TableCell);\r\n\r\n// const StyledTableRow = withStyles((theme) => ({\r\n//     root: {\r\n//         '&:nth-of-type(even)': {\r\n//             backgroundColor: '#283A46',\r\n//         },\r\n//         '&:nth-of-type(odd)': {\r\n//             backgroundColor: '#2F4451',\r\n//             borderTop: '2px solid #2F4451',\r\n//             borderBottom: '2px solid #2F4451',\r\n//         },\r\n//         '&:hover': {\r\n//             backgroundColor: '#2A5368'\r\n//         }\r\n//     },\r\n// }))(TableRow);\r\n\r\n// const StyledButtonSolid = withStyles({\r\n//     root: {\r\n//         background: 'linear-gradient(45deg, #14AFF1 30%, #14AFF1 90%)',\r\n//         borderRadius: 7,\r\n//         border: 0,\r\n//         color: 'white',\r\n//         height: '2.3vw',\r\n//         padding: '0vw 1.2vw',\r\n//         margin: '0.3vw 0.3vw',\r\n//         fontSize: '1vw',\r\n//     },\r\n//     label: {\r\n//         textTransform: 'capitalize',\r\n//     },\r\n// })(Button);\r\n\r\n// const StyledButtonHollow = withStyles({\r\n//     root: {\r\n//         border: '1px solid #14AFF1',\r\n//         borderRadius: 7,\r\n//         color: 'white',\r\n//         height: '2.3vw',\r\n//         padding: '0vw 0.9vw',\r\n//         margin: '0.3vw 0.6vw',\r\n//         fontSize: '1vw',\r\n//     },\r\n//     label: {\r\n//         textTransform: 'capitalize',\r\n//     },\r\n// })(Button);\r\n\r\n// const StyledButtonHollowAdd = withStyles({\r\n//     root: {\r\n//         border: '1px solid #14AFF1',\r\n//         borderRadius: 7,\r\n//         color: 'white',\r\n//         height: '2.3vw',\r\n//         padding: '0vw 0.9vw',\r\n//         margin: '0.3vw 0.6vw',\r\n//         fontSize: '1vw',\r\n//     },\r\n//     label: {\r\n//         textTransform: 'capitalize',\r\n//     },\r\n// })(Button);\r\n\r\n// const StyledButtonHollowEdit = withStyles({\r\n//     root: {\r\n//         border: '1px solid #14AFF1',\r\n//         borderRadius: 7,\r\n//         color: 'white',\r\n//         height: '2.3vw',\r\n//         padding: '0vw 0.9vw',\r\n//         margin: '0.3vw 0.6vw',\r\n//         fontSize: '1vw',\r\n//     },\r\n//     label: {\r\n//         textTransform: 'capitalize',\r\n//     },\r\n// })(Button);\r\n\r\n// const StyledButtonHollowDelete = withStyles({\r\n//     root: {\r\n//         border: '1px solid #14AFF1',\r\n//         borderRadius: 7,\r\n//         color: 'white',\r\n//         height: '2.3vw',\r\n//         padding: '0vw 0.9vw',\r\n//         margin: '0.3vw 0.6vw',\r\n//         fontSize: '1vw',\r\n//     },\r\n//     label: {\r\n//         textTransform: 'capitalize',\r\n//     },\r\n// })(Button);\r\n\r\n\r\n\r\n// const StyledCheckbox = withStyles({\r\n//     root: {\r\n//         '&$checked': {\r\n//             color: '#14AFF1',\r\n//         },\r\n//         color: '#97A1A9',\r\n//         height: '1vw',\r\n//         borderBottom: \"none\",\r\n//     },\r\n//     checked: {},\r\n// })(Checkbox);\r\n\r\n// const StyledInput = withStyles({\r\n//     root: {\r\n//         // borderBottom: '0px solid black',\r\n//         border: '1px solid #14AFF1',\r\n//         borderRadius: 10,\r\n//         color: 'white',\r\n//         height: '2.5vw',\r\n//         padding: '0vw 2vw',\r\n//         margin: '0.3vw 1vw'\r\n//     },\r\n//     label: {\r\n//         textTransform: 'capitalize',\r\n//     },\r\n// })(Input);\r\n\r\n\r\n// // function createData(name, cid, iid, iamount, dd, ppd, pab, notes) {\r\n// //     return { name, cid, iid, iamount, dd, ppd, pab, notes };\r\n// // }\r\n\r\n\r\n\r\n// const useStyles = makeStyles({\r\n//     table: {\r\n//         minWidth: 700,\r\n//     },\r\n//     button: {\r\n//         '& > *': {\r\n//             background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n//             color: 'white',\r\n//         },\r\n//     },\r\n//     underline: {\r\n//         \"&&&:before\": {\r\n//             borderBottom: \"none\"\r\n//         },\r\n//         \"&&:after\": {\r\n//             borderBottom: \"none\"\r\n//         }\r\n//     },\r\n//     '@global': {\r\n//         '*::-webkit-scrollbar': {\r\n//             width: '0.4em'\r\n//         },\r\n//         '*::-webkit-scrollbar-track': {\r\n//             '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\r\n//             backgroundColor: '#2E4350',\r\n//         },\r\n//         '*::-webkit-scrollbar-thumb': {\r\n//             backgroundColor: '#61707B',\r\n//             outline: '1px solid slategrey',\r\n//         }\r\n//     },\r\n// });\r\n\r\n// // handleSelectAllClick = (event) => {\r\n// //     if (event.target.checked) {\r\n// //         setChecked(checked => [...oldArray, newElement]);\r\n// //       this.setState((state) => ({ selected: state.data.map((n) => n.id) }));\r\n// //       return;\r\n// //     }\r\n// //     this.setState({ selected: [] });\r\n// //   };\r\n\r\n// //   handleCheckboxClick = (event, id) => {\r\n// //     event.stopPropagation();\r\n// //     console.log(\"checkbox select\");\r\n// //     const { selected } = this.state;\r\n// //     const selectedIndex = selected.indexOf(id);\r\n// //     let newSelected = [];\r\n\r\n// //     if (selectedIndex === -1) {\r\n// //       newSelected = newSelected.concat(selected, id);\r\n// //     } else if (selectedIndex === 0) {\r\n// //       newSelected = newSelected.concat(selected.slice(1));\r\n// //     } else if (selectedIndex === selected.length - 1) {\r\n// //       newSelected = newSelected.concat(selected.slice(0, -1));\r\n// //     } else if (selectedIndex > 0) {\r\n// //       newSelected = newSelected.concat(\r\n// //         selected.slice(0, selectedIndex),\r\n// //         selected.slice(selectedIndex + 1)\r\n// //       );\r\n// //     }\r\n\r\n// //     this.setState({ selected: newSelected });\r\n// //   };\r\n\r\n\r\n// let debounceTimer = null;\r\n// export default function CustomizedTables() {\r\n//     // const { useState } = React;\r\n//     const [checked, setChecked] = useState([]);\r\n//     const [data, setData] = useState([]);\r\n//     const [hasMore, setHasMore] = useState(false);\r\n\r\n//     const [page, setPage] = useState(1);\r\n//     const [searchPage, setSearchPage] = useState(1);\r\n\r\n//     const [openPopup, setOpenPopup] = useState(false)\r\n//     const [openPopupEdit, setOpenPopupEdit] = useState(false)\r\n//     const [openPopupDelete, setOpenPopupDelete] = useState(false)\r\n//     const [openPopupViewCorrospondance, setOpenPopupViewCorrospondance] = useState(false)\r\n//     const classes = useStyles();\r\n\r\n//     const [recordForEdit, setRecordForEdit] = useState(null)\r\n//     const [checkList, setCheckList] = useState([])\r\n//     const [finalCheckItemList, setFinalCheckItemList] = useState([])\r\n//     const [docId, setDocId] = useState(0)\r\n\r\n//     const [searchValue, setSearchValue] = React.useState(\"\");\r\n//     const [searchResults, setResults] = React.useState([]);\r\n//     const [tableData, setTableData] = React.useState([]);\r\n\r\n\r\n//     useEffect(() => {\r\n//         const getData = async () => {\r\n//             console.log(\"IN GET DATA\");\r\n//             await fetch(`http://localhost:8080/1828049/RetriveInvoiceDataPageServlet?page=${page}`)\r\n//                 .then((res) => res.json())\r\n//                 .then((data) => {\r\n//                     setData((prev) => [...prev, ...data]);\r\n//                     setHasMore(true);\r\n//                 })\r\n//                 .catch((err) => console.log(err));\r\n//         };\r\n//         getData();\r\n//     }, [page]);\r\n\r\n\r\n\r\n//     useEffect(() => {\r\n//         const getData = async () => {\r\n//             console.log(\"IN GET DATA\");\r\n//             await getSearchResults();\r\n//         };\r\n//         getData();\r\n//     }, [searchPage]);\r\n\r\n\r\n\r\n//     useEffect(() => {\r\n//         if (searchResults.length > 0) {\r\n//             setTableData(data)\r\n//             setData(searchResults)\r\n//         } else {\r\n//             setData(tableData)\r\n//         }\r\n//     }, [searchResults])\r\n\r\n\r\n//     // const fetchInvoiceList = () => {\r\n//     //     setPage(page + 1);\r\n//     // }\r\n\r\n//     // const fetchSearchList = () => {\r\n//     //     setSearchPage(searchPage + 1)\r\n//     // }\r\n\r\n//     const fetchMoreData = () => {\r\n//         if (searchValue === \"\") {\r\n//             setPage(page + 1);\r\n//             console.log(\"FUNCTION  fetchInvoiceList\")\r\n//         } else {\r\n//             setSearchPage(searchPage + 1)\r\n//             console.log(\"FUNCTION fetchSearchList\")\r\n//         }\r\n//     };\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//     const handleCheckboxClick = (docId) => {\r\n//         console.log(`docId=${docId}`)\r\n//         if (checkList.indexOf(docId) === -1) {\r\n//             console.log('IF')\r\n//             setCheckList((prev) => [...prev, docId]);\r\n//         } else {\r\n//             console.log('ELSE')\r\n//             let myList = []\r\n//             for (let i = 0; i < checkList.length; i++) {\r\n//                 if (checkList[i] !== docId) {\r\n//                     myList.push(checkList[i])\r\n//                 }\r\n//             }\r\n//             setCheckList(myList)\r\n//         }\r\n\r\n//         console.log(`checkList = ${checkList}`)\r\n//     }\r\n\r\n//     function makeFinalCheckedItemList() {\r\n//         let tempList = []\r\n//         for (let i = 0; i < checkList.length; i++) {\r\n//             for (let j = 0; j < data.length; j++) {\r\n//                 if (checkList[i] == data[j].docId) {\r\n//                     tempList.push(data[j])\r\n//                 }\r\n\r\n//             }\r\n//         }\r\n//         setFinalCheckItemList(tempList)\r\n//         console.log(`finalCheckItemList=${finalCheckItemList.map(e => e.nameCustomer)}`)\r\n//     }\r\n\r\n//     function retriveEditItem() {\r\n//         if (checkList.length === 0) {\r\n//             alert(`Select one item`)\r\n//         } else if (checkList.length > 1) {\r\n//             alert(`Select only one item`)\r\n//         } else if (checkList.length === 1) {\r\n//             setDocId(checkList[0])\r\n//             // makeFinalCheckedItemList()\r\n//             setOpenPopupEdit(true)\r\n//             setOpenPopup(false)\r\n//             setOpenPopupDelete(false)\r\n//         }\r\n\r\n\r\n\r\n//     }\r\n\r\n//     function retriveDeleteItem() {\r\n//         if (checkList.length === 0) {\r\n//             alert(`Select one item`)\r\n//         } else if (checkList.length > 1) {\r\n//             alert(`Select only one item`)\r\n//         } else if (checkList.length === 1) {\r\n//             setDocId(checkList[0])\r\n//             // makeFinalCheckedItemList()\r\n//             setOpenPopupDelete(true)\r\n//             setOpenPopupEdit(false)\r\n//             setOpenPopup(false)\r\n\r\n//         }\r\n\r\n\r\n\r\n//     }\r\n\r\n//     function retriveViewCorrospondanceItem() {\r\n//         makeFinalCheckedItemList()\r\n//         setOpenPopupViewCorrospondance(true)\r\n//         setOpenPopupDelete(false)\r\n//         setOpenPopupEdit(false)\r\n//         setOpenPopup(false)\r\n//     }\r\n\r\n//     const getSearchResults = () => {\r\n//         axios\r\n//             .get(`http://localhost:8080/1828049/SearchInvoiceDataPageServlet?page=${searchPage}&invoice_id=${searchValue}`)\r\n//             .then((response) => {\r\n//                 console.log(\"Search Response Data\", response.data);\r\n//                 setResults(response.data);\r\n//                 // setData(response.data);\r\n//             })\r\n//             .then((error) => {\r\n//                 console.log(\"Error\", error);\r\n//             });\r\n//     };\r\n\r\n//     const handleSearchValueChange = (event) => {\r\n//         const newSearchVal = event.target.value;\r\n//         setSearchValue(newSearchVal);\r\n\r\n//         // if (newSearchVal.trim().length >= 3) {\r\n//         clearTimeout(debounceTimer);\r\n//         debounceTimer = setTimeout(() => {\r\n//             setSearchPage(1);\r\n//             getSearchResults();\r\n\r\n//         }, 500);\r\n//         // }\r\n//         // if (newSearchVal === \"\") setResults([]);\r\n//         // if (newSearchVal === \"\") setData([]);\r\n//     };\r\n\r\n//     return (\r\n//         <div>\r\n//             <div style={{ fontSize: '1.47vw', color: 'white', paddingBottom: '1.6vw' }}>Invoice List</div>\r\n\r\n\r\n//             <div style={{ padding: '1.2vw 1.6vw', backgroundColor: '#2E4350', borderRadius: '5px' }}>\r\n\r\n\r\n\r\n//                 <div style={{ paddingBottom: '1vw' }}>\r\n//                     <span style={{}}>\r\n//                         <StyledButtonSolid style={{ marginLeft: '0px' }}>Predict</StyledButtonSolid>\r\n//                         <StyledButtonHollow onClick={() => retriveViewCorrospondanceItem()}>View Correspondence</StyledButtonHollow>\r\n//                     </span>\r\n//                     <span style={{ float: 'right' }}>\r\n//                         {/* <AddButton /> */}\r\n//                         <StyledButtonHollowAdd startIcon={<AddIcon />} onClick={() => setOpenPopup(true)}>Add</StyledButtonHollowAdd>\r\n//                         {/* <StyledButtonHollowEdit startIcon={<EditIcon />} onClick={() => setOpenPopupEdit(true)}>Edit</StyledButtonHollowEdit> */}\r\n//                         <StyledButtonHollowEdit startIcon={<EditIcon />} onClick={() => retriveEditItem()}>Edit</StyledButtonHollowEdit>\r\n\r\n//                         <StyledButtonHollowDelete startIcon={<RemoveIcon />} onClick={() => retriveDeleteItem()}>Delete</StyledButtonHollowDelete>\r\n//                         <input style={{ border: '1px solid #14AFF1', borderRadius: '0.7vw', width: '16vw', height: '2.1vw', margin: '0.3vw 0.5vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46', background: { SearchIcon } }} placeholder=\"Search By Invoice Number\" className=\"customInput\" onChange={handleSearchValueChange} />\r\n//                     </span>\r\n//                     <MyPopUp openPopup={openPopup} setOpenPopup={setOpenPopup}>\r\n\r\n//                     </MyPopUp>\r\n//                     <EditPopUp docId={docId} openPopupEdit={openPopupEdit} setOpenPopupEdit={setOpenPopupEdit}>\r\n\r\n//                     </EditPopUp>\r\n//                     <DeletePopUp docId={docId} openPopupDelete={openPopupDelete} setOpenPopupDelete={setOpenPopupDelete}>\r\n\r\n//                     </DeletePopUp>\r\n//                     <ViewCorrospondancePopUp finalCheckItemList={finalCheckItemList} openPopupViewCorrospondance={openPopupViewCorrospondance} setOpenPopupViewCorrospondance={setOpenPopupViewCorrospondance}>\r\n\r\n//                     </ViewCorrospondancePopUp>\r\n//                 </div>\r\n\r\n\r\n\r\n//                 <InfiniteScroll\r\n//                     dataLength={data.length}\r\n//                     scrollableTarget=\"scrollableDiv\"\r\n//                     next={fetchMoreData}\r\n//                     hasMore={hasMore}\r\n//                     loader={\r\n//                         <div\r\n//                             style={{\r\n//                                 textAlign: \"center\",\r\n//                                 marginTop: \"10px\",\r\n//                                 marginBottom: \"10px\",\r\n//                             }}\r\n//                         >\r\n//                             <CircularProgress color=\"secondary\" style={{ fontSize: \"10px\" }} />\r\n//                         </div>\r\n//                     }\r\n//                 >\r\n\r\n//                     <TableContainer style={{ maxHeight: '80vh' }} component={Paper}>\r\n//                         <Table stickyHeader className={classes.table} aria-label=\"customized table\">\r\n//                             <TableHead>\r\n//                                 <TableRow>\r\n//                                     <ThemeProvider theme={themeCheckBox}>\r\n//                                         <StyledTableCell padding=\"checkbox\" >\r\n\r\n//                                             <StyledCheckbox\r\n//                                             // onChange={handleSelectAllClick} \r\n//                                             />\r\n//                                         </StyledTableCell>\r\n//                                     </ThemeProvider>\r\n//                                     <StyledTableCell>Customer Name</StyledTableCell>\r\n//                                     <StyledTableCell>Customer #</StyledTableCell>\r\n//                                     <StyledTableCell>Invioce #</StyledTableCell>\r\n//                                     <StyledTableCell>Invioce Amount</StyledTableCell>\r\n//                                     <StyledTableCell align=\"right\">Due Date</StyledTableCell>\r\n//                                     <StyledTableCell align=\"right\">Predicted Payment Date</StyledTableCell>\r\n//                                     <StyledTableCell>Predicted Aging Bucket</StyledTableCell>\r\n//                                     <StyledTableCell>Notes</StyledTableCell>\r\n//                                 </TableRow>\r\n//                             </TableHead>\r\n\r\n//                             <TableBody>\r\n\r\n//                                 {data.map((d) => (\r\n//                                     <StyledTableRow key={d.docId}>\r\n//                                         <ThemeProvider theme={themeCheckBox}>\r\n//                                             <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n\r\n//                                                 <StyledCheckbox onClick={(e) => handleCheckboxClick(d.docId)}\r\n//                                                 // onClick={(event) =>\r\n//                                                 // handleCheckboxClick(event, row.id)\r\n//                                                 // }\r\n//                                                 // className=\"selectCheckbox\"\r\n//                                                 // checked={isSelected}\r\n//                                                 />\r\n\r\n\r\n//                                             </TableCell>\r\n//                                         </ThemeProvider>\r\n//                                         <StyledTableCell component=\"th\" scope=\"row\">\r\n//                                             {d.nameCustomer}\r\n//                                         </StyledTableCell>\r\n//                                         <StyledTableCell>{d.custNumber}</StyledTableCell>\r\n//                                         <StyledTableCell>{d.invoiceId}</StyledTableCell>\r\n//                                         <StyledTableCell>{d.totalOpenAmount}</StyledTableCell>\r\n//                                         <StyledTableCell align=\"right\">{d.dueInDate}</StyledTableCell>\r\n//                                         <StyledTableCell align=\"right\">{\"--\"}</StyledTableCell>\r\n//                                         <StyledTableCell>{\"--\"}</StyledTableCell>\r\n//                                         <StyledTableCell>{d.notes}</StyledTableCell>\r\n//                                     </StyledTableRow>\r\n//                                 ))}\r\n\r\n//                             </TableBody>\r\n\r\n\r\n//                         </Table>\r\n\r\n//                     </TableContainer>\r\n//                 </InfiniteScroll>\r\n//             </div>\r\n\r\n//         </div>\r\n\r\n//     );\r\n// }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Input from '@material-ui/core/Input';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport MyPopUp from './MyPopUp';\r\nimport RemoveIcon from '@material-ui/icons/Remove';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport EditPopUp from './EditPopUp';\r\nimport DeletePopUp from './DeletePopUp';\r\nimport ViewCorrospondancePopUp from './ViewCorrospondancePopUp';\r\nimport axios from 'axios'\r\nimport ViewCorrespondenceModal from './VC';\r\n\r\nconst themeCheckBox = createMuiTheme({\r\n    overrides: {\r\n        MuiTableCell: {\r\n            root: {\r\n                borderBottom: \"none\"\r\n            },\r\n        },\r\n    },\r\n});\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    root: {\r\n        borderBottom: \"none\"\r\n    },\r\n    head: {\r\n        backgroundColor: \"#2E4350\",\r\n        color: theme.palette.common.white,\r\n        borderBottom: '2px solid #283A46',\r\n        fontSize: '0.9vw',\r\n        color: '#97A1A9',\r\n        paddingTop: '0px',\r\n        paddingBottom: '0px',\r\n    },\r\n    body: {\r\n        fontSize: '1.1vw',\r\n        color: 'white',\r\n        paddingTop: '0px',\r\n        paddingBottom: '0px',\r\n    },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(even)': {\r\n            backgroundColor: '#283A46',\r\n        },\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: '#2F4451',\r\n            borderTop: '2px solid #2F4451',\r\n            borderBottom: '2px solid #2F4451',\r\n        },\r\n        '&:hover': {\r\n            backgroundColor: '#2A5368'\r\n        }\r\n    },\r\n}))(TableRow);\r\n\r\nconst StyledButtonSolid = withStyles({\r\n    root: {\r\n        background: 'linear-gradient(45deg, #14AFF1 30%, #14AFF1 90%)',\r\n        borderRadius: 7,\r\n        border: 0,\r\n        color: 'white',\r\n        height: '2.3vw',\r\n        padding: '0vw 1.2vw',\r\n        margin: '0.3vw 0.3vw',\r\n        fontSize: '1vw',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\nconst StyledButtonHollow = withStyles({\r\n    root: {\r\n        border: '1px solid #14AFF1',\r\n        borderRadius: 7,\r\n        color: 'white',\r\n        height: '2.3vw',\r\n        padding: '0vw 0.9vw',\r\n        margin: '0.3vw 0.6vw',\r\n        fontSize: '1vw',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\nconst StyledButtonHollowAdd = withStyles({\r\n    root: {\r\n        border: '1px solid #14AFF1',\r\n        borderRadius: 7,\r\n        color: 'white',\r\n        height: '2.3vw',\r\n        padding: '0vw 0.9vw',\r\n        margin: '0.3vw 0.6vw',\r\n        fontSize: '1vw',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\nconst StyledButtonHollowEdit = withStyles({\r\n    root: {\r\n        border: '1px solid #14AFF1',\r\n        borderRadius: 7,\r\n        color: 'white',\r\n        height: '2.3vw',\r\n        padding: '0vw 0.9vw',\r\n        margin: '0.3vw 0.6vw',\r\n        fontSize: '1vw',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\nconst StyledButtonHollowDelete = withStyles({\r\n    root: {\r\n        border: '1px solid #14AFF1',\r\n        borderRadius: 7,\r\n        color: 'white',\r\n        height: '2.3vw',\r\n        padding: '0vw 0.9vw',\r\n        margin: '0.3vw 0.6vw',\r\n        fontSize: '1vw',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\n\r\n\r\nconst StyledCheckbox = withStyles({\r\n    root: {\r\n        '&$checked': {\r\n            color: '#14AFF1',\r\n        },\r\n        color: '#97A1A9',\r\n        height: '1vw',\r\n        borderBottom: \"none\",\r\n    },\r\n    checked: {},\r\n})(Checkbox);\r\n\r\nconst StyledInput = withStyles({\r\n    root: {\r\n        // borderBottom: '0px solid black',\r\n        border: '1px solid #14AFF1',\r\n        borderRadius: 10,\r\n        color: 'white',\r\n        height: '2.5vw',\r\n        padding: '0vw 2vw',\r\n        margin: '0.3vw 1vw'\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Input);\r\n\r\n\r\n// function createData(name, cid, iid, iamount, dd, ppd, pab, notes) {\r\n//     return { name, cid, iid, iamount, dd, ppd, pab, notes };\r\n// }\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 700,\r\n    },\r\n    button: {\r\n        '& > *': {\r\n            background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n            color: 'white',\r\n        },\r\n    },\r\n    underline: {\r\n        \"&&&:before\": {\r\n            borderBottom: \"none\"\r\n        },\r\n        \"&&:after\": {\r\n            borderBottom: \"none\"\r\n        }\r\n    },\r\n    '@global': {\r\n        '*::-webkit-scrollbar': {\r\n            width: '0.4em'\r\n        },\r\n        '*::-webkit-scrollbar-track': {\r\n            '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)',\r\n            backgroundColor: '#2E4350',\r\n        },\r\n        '*::-webkit-scrollbar-thumb': {\r\n            backgroundColor: '#61707B',\r\n            outline: '1px solid slategrey',\r\n        }\r\n    },\r\n});\r\n\r\n// handleSelectAllClick = (event) => {\r\n//     if (event.target.checked) {\r\n//         setChecked(checked => [...oldArray, newElement]);\r\n//       this.setState((state) => ({ selected: state.data.map((n) => n.id) }));\r\n//       return;\r\n//     }\r\n//     this.setState({ selected: [] });\r\n//   };\r\n\r\n//   handleCheckboxClick = (event, id) => {\r\n//     event.stopPropagation();\r\n//     console.log(\"checkbox select\");\r\n//     const { selected } = this.state;\r\n//     const selectedIndex = selected.indexOf(id);\r\n//     let newSelected = [];\r\n\r\n//     if (selectedIndex === -1) {\r\n//       newSelected = newSelected.concat(selected, id);\r\n//     } else if (selectedIndex === 0) {\r\n//       newSelected = newSelected.concat(selected.slice(1));\r\n//     } else if (selectedIndex === selected.length - 1) {\r\n//       newSelected = newSelected.concat(selected.slice(0, -1));\r\n//     } else if (selectedIndex > 0) {\r\n//       newSelected = newSelected.concat(\r\n//         selected.slice(0, selectedIndex),\r\n//         selected.slice(selectedIndex + 1)\r\n//       );\r\n//     }\r\n\r\n//     this.setState({ selected: newSelected });\r\n//   };\r\n\r\n\r\nlet debounceTimer = null;\r\nexport default function CustomizedTables() {\r\n    // const { useState } = React;\r\n    const [checked, setChecked] = useState([]);\r\n    const [data, setData] = useState([]);\r\n    const [hasMore, setHasMore] = useState(false);\r\n    const [page, setPage] = useState(1);\r\n    const [openPopup, setOpenPopup] = useState(false)\r\n    const [openPopupEdit, setOpenPopupEdit] = useState(false)\r\n    const [openPopupDelete, setOpenPopupDelete] = useState(false)\r\n    const [openPopupViewCorrospondance, setOpenPopupViewCorrospondance] = useState(false)\r\n    const classes = useStyles();\r\n\r\n    const [recordForEdit, setRecordForEdit] = useState(null)\r\n    const [checkList, setCheckList] = useState([])\r\n    const [finalCheckItemList, setFinalCheckItemList] = useState([])\r\n    const [docId, setDocId] = useState(0)\r\n\r\n    const [searchValue, setSearchValue] = React.useState(\"\");\r\n    const [searchResults, setResults] = React.useState([]);\r\n    const [tableData, setTableData] = React.useState([]);\r\n    const [addAmount, setAddAmount] = React.useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            console.log(\"IN GET DATA\");\r\n            await fetch(`http://localhost:8080/1828049/RetriveInvoiceDataPageServlet?page=${page}`)\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    setData((prev) => [...prev, ...data]);\r\n                    setHasMore(true);\r\n                })\r\n                .catch((err) => console.log(err));\r\n        };\r\n        getData();\r\n    }, [page]);\r\n\r\n    useEffect(() => {\r\n        if (searchResults.length > 0) {\r\n            setTableData(data)\r\n            setData(searchResults)\r\n        } else {\r\n            setData(tableData)\r\n        }\r\n    }, [searchResults])\r\n\r\n    const fetchMoreData = () => {\r\n        console.log(\"INSIDE FETCHDATA\");\r\n        setPage(page + 1);\r\n    };\r\n\r\n    const handleCheckboxClick = (docId) => {\r\n        console.log(`docId=${docId}`)\r\n        if (checkList.indexOf(docId) === -1) {\r\n            console.log('IF')\r\n            setCheckList((prev) => [...prev, docId]);\r\n        } else {\r\n            console.log('ELSE')\r\n            let myList = []\r\n            for (let i = 0; i < checkList.length; i++) {\r\n                if (checkList[i] !== docId) {\r\n                    myList.push(checkList[i])\r\n                }\r\n            }\r\n            setCheckList(myList)\r\n        }\r\n\r\n        console.log(`checkList = ${checkList}`)\r\n    }\r\n\r\n    function makeFinalCheckedItemList() {\r\n        let tempList = []\r\n        for (let i = 0; i < checkList.length; i++) {\r\n            for (let j = 0; j < data.length; j++) {\r\n                if (checkList[i] == data[j].docId) {\r\n                    tempList.push(data[j])\r\n                }\r\n\r\n            }\r\n        }\r\n        setFinalCheckItemList(tempList)\r\n        console.log(`finalCheckItemList=${finalCheckItemList.map(e => e.nameCustomer)}`)\r\n    }\r\n\r\n    function addAllAmount() {\r\n        console.log('Inside addAllAmount')\r\n        let sum = 0.0\r\n        for (let i = 0; i < finalCheckItemList.length; i++) {\r\n            console.log(`sum = ${sum}`)\r\n            sum += parseFloat(finalCheckItemList[i].totalOpenAmount)\r\n        }\r\n        setAddAmount(sum)\r\n    }\r\n\r\n    function retriveEditItem() {\r\n        if (checkList.length === 0) {\r\n            alert(`Select one item`)\r\n        } else if (checkList.length > 1) {\r\n            alert(`Select only one item`)\r\n        } else if (checkList.length === 1) {\r\n            setDocId(checkList[0])\r\n            // makeFinalCheckedItemList()\r\n            setOpenPopupEdit(true)\r\n            setOpenPopup(false)\r\n            setOpenPopupDelete(false)\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function retriveDeleteItem() {\r\n        if (checkList.length === 0) {\r\n            alert(`Select one item`)\r\n        } else {\r\n            // setDocId(checkList[0])\r\n            // makeFinalCheckedItemList()\r\n            setOpenPopupDelete(true)\r\n            setOpenPopupEdit(false)\r\n            setOpenPopup(false)\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    function retriveViewCorrospondanceItem() {\r\n\r\n        if (checkList.length === 0) {\r\n            alert(`Select one item`)\r\n        } else {\r\n            makeFinalCheckedItemList()\r\n            addAllAmount()\r\n            setOpenPopupViewCorrospondance(true)\r\n            setOpenPopupDelete(false)\r\n            setOpenPopupEdit(false)\r\n            setOpenPopup(false)\r\n\r\n        }\r\n    }\r\n\r\n    const getSearchResults = (newSearchVal) => {\r\n        axios\r\n            .get(`http://localhost:8080/1828049/SearchInvoiceDataPageServlet`, {\r\n                params: {\r\n                    invoice_id: newSearchVal,\r\n                    page: 1\r\n                }\r\n            })\r\n            .then((response) => {\r\n                console.log(\"Search Response Data\", response.data);\r\n                setResults(response.data);\r\n                // setData(response.data);\r\n            })\r\n            .then((error) => {\r\n                console.log(\"Error\", error);\r\n            });\r\n    };\r\n\r\n    const handleSearchValueChange = (event) => {\r\n        const newSearchVal = event.target.value;\r\n        setSearchValue(newSearchVal);\r\n\r\n        // if (newSearchVal.trim().length >= 3) {\r\n        clearTimeout(debounceTimer);\r\n        debounceTimer = setTimeout(() => {\r\n            getSearchResults(newSearchVal);\r\n        }, 500);\r\n        // }\r\n        // if (newSearchVal === \"\") setResults([]);\r\n        // if (newSearchVal === \"\") setData([]);\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            {/* <div style={{ fontSize: '1.47vw', color: 'white', paddingBottom: '1.6vw' }}>Invoice List</div> */}\r\n\r\n\r\n            <div style={{ padding: '1.2vw 1.6vw 0', backgroundColor: '#273D49CC', borderRadius: '5px' }}>\r\n\r\n\r\n\r\n                <div style={{ paddingBottom: '1vw' }}>\r\n                    <span style={{}}>\r\n                        <StyledButtonSolid style={{ marginLeft: '0px' }}>Predict</StyledButtonSolid>\r\n                        <StyledButtonHollow onClick={() => retriveViewCorrospondanceItem()}>View Correspondence</StyledButtonHollow>\r\n                    </span>\r\n                    <span style={{ float: 'right' }}>\r\n                        {/* <AddButton /> */}\r\n                        <StyledButtonHollowAdd startIcon={<AddIcon />} onClick={() => setOpenPopup(true)}>Add</StyledButtonHollowAdd>\r\n                        {/* <StyledButtonHollowEdit startIcon={<EditIcon />} onClick={() => setOpenPopupEdit(true)}>Edit</StyledButtonHollowEdit> */}\r\n                        <StyledButtonHollowEdit startIcon={<EditIcon />} onClick={() => retriveEditItem()}>Edit</StyledButtonHollowEdit>\r\n\r\n                        <StyledButtonHollowDelete startIcon={<RemoveIcon />} onClick={() => retriveDeleteItem()}>Delete</StyledButtonHollowDelete>\r\n                        <input style={{ border: '1px solid #14AFF1', borderRadius: '0.7vw', width: '16vw', height: '2.1vw', margin: '0.3vw 0.5vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46', background: { SearchIcon }, outline: 'none' }} placeholder=\"Search By Invoice Number\" className=\"customInput\" onChange={handleSearchValueChange} />\r\n                    </span>\r\n                    <MyPopUp openPopup={openPopup} setOpenPopup={setOpenPopup}>\r\n\r\n                    </MyPopUp>\r\n                    <EditPopUp docId={docId} openPopupEdit={openPopupEdit} setOpenPopupEdit={setOpenPopupEdit}>\r\n\r\n                    </EditPopUp>\r\n                    <DeletePopUp checkList={checkList} openPopupDelete={openPopupDelete} setOpenPopupDelete={setOpenPopupDelete}>\r\n\r\n                    </DeletePopUp>\r\n                    {/* <ViewCorrospondancePopUp finalCheckItemList={finalCheckItemList} openPopupViewCorrospondance={openPopupViewCorrospondance} setOpenPopupViewCorrospondance={setOpenPopupViewCorrospondance}>\r\n\r\n                    </ViewCorrospondancePopUp> */}\r\n                    <ViewCorrespondenceModal totalAmount={addAmount} finalCheckItemList={finalCheckItemList} openPopupViewCorrospondance={openPopupViewCorrospondance} setOpenPopupViewCorrospondance={setOpenPopupViewCorrospondance}>\r\n\r\n                    </ViewCorrespondenceModal>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n                <TableContainer id=\"table-container\" style={{ maxHeight: '70vh', background: '#273D49CC' }} component={Paper}>\r\n\r\n                    <InfiniteScroll\r\n                        dataLength={data.length}\r\n                        scrollableTarget=\"table-container\"\r\n                        next={fetchMoreData}\r\n                        hasMore={hasMore}\r\n                        loader={\r\n                            <div\r\n                                style={{\r\n                                    textAlign: \"center\",\r\n                                    marginTop: \"10px\",\r\n                                    marginBottom: \"10px\",\r\n                                }}\r\n                            >\r\n                                <CircularProgress color=\"secondary\" style={{ fontSize: \"10px\" }} />\r\n                            </div>\r\n                        }\r\n                    >\r\n                        <Table stickyHeader className={classes.table} aria-label=\"customized table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <ThemeProvider theme={themeCheckBox}>\r\n                                        <StyledTableCell padding=\"checkbox\" >\r\n\r\n                                            <StyledCheckbox\r\n                                            // onChange={handleSelectAllClick} \r\n                                            />\r\n                                        </StyledTableCell>\r\n                                    </ThemeProvider>\r\n                                    <StyledTableCell>Customer Name</StyledTableCell>\r\n                                    <StyledTableCell>Customer #</StyledTableCell>\r\n                                    <StyledTableCell>Invioce #</StyledTableCell>\r\n                                    <StyledTableCell>Invioce Amount</StyledTableCell>\r\n                                    <StyledTableCell align=\"right\">Due Date</StyledTableCell>\r\n                                    <StyledTableCell align=\"right\">Predicted Payment Date</StyledTableCell>\r\n                                    <StyledTableCell>Predicted Aging Bucket</StyledTableCell>\r\n                                    <StyledTableCell>Notes</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n\r\n                            <TableBody>\r\n\r\n                                {data.map((d) => (\r\n                                    <StyledTableRow key={d.docId}>\r\n                                        <ThemeProvider theme={themeCheckBox}>\r\n                                            <TableCell className=\"selectCheckbox\" padding=\"checkbox\">\r\n\r\n                                                <StyledCheckbox onClick={(e) => handleCheckboxClick(d.docId)}\r\n                                                // onClick={(event) =>\r\n                                                // handleCheckboxClick(event, row.id)\r\n                                                // }\r\n                                                // className=\"selectCheckbox\"\r\n                                                // checked={isSelected}\r\n                                                />\r\n\r\n\r\n                                            </TableCell>\r\n                                        </ThemeProvider>\r\n                                        <StyledTableCell component=\"th\" scope=\"row\">\r\n                                            {d.nameCustomer}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell>{d.custNumber}</StyledTableCell>\r\n                                        <StyledTableCell>{d.invoiceId}</StyledTableCell>\r\n                                        <StyledTableCell>{d.totalOpenAmount}</StyledTableCell>\r\n                                        <StyledTableCell align=\"right\">{d.dueInDate}</StyledTableCell>\r\n                                        <StyledTableCell align=\"right\">{\"--\"}</StyledTableCell>\r\n                                        <StyledTableCell>{\"--\"}</StyledTableCell>\r\n                                        <StyledTableCell>{d.notes}</StyledTableCell>\r\n                                    </StyledTableRow>\r\n                                ))}\r\n\r\n                            </TableBody>\r\n\r\n\r\n                        </Table>\r\n                    </InfiniteScroll>\r\n                </TableContainer>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n    );\r\n}","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\EditButton.js",["145","146","147"],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\DeleteButton.js",["148","149","150"],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\AddButton.js",["151","152","153","154","155"],"C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\EditPopUp.js",["156","157","158","159","160","161","162","163","164","165","166"],"import React from 'react'\r\nimport { Dialog, DialogTitle, DialogContent } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios'\r\nimport { useState, useEffect, useCallback, useRef } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport '../App.css'\r\n\r\n\r\nconst themeDialogBox = createMuiTheme({\r\n    overrides: {\r\n        MuiDialog: {\r\n            paperWidthSm: {\r\n                maxWidth: '25vw',\r\n            },\r\n        },\r\n        MuiPaper: {\r\n\r\n            rounded: {\r\n                width: '65vw',\r\n                background: '#2A3E4C'\r\n            },\r\n        }\r\n    },\r\n});\r\n\r\nconst themeAddButton = createMuiTheme({\r\n    overrides: {\r\n        MuiButton: {\r\n            contained: {\r\n                backgroundColor: '#97A1A9',\r\n                borderRadius: '10px',\r\n                width: '5vw',\r\n                color: 'white',\r\n                fontSize: '10px',\r\n            },\r\n            outlined: {\r\n                border: '1px solid #14AFF1',\r\n                padding: '5px 5px',\r\n                borderRadius: '10px',\r\n                color: 'white',\r\n                fontSize: '10px',\r\n            },\r\n            root: {\r\n                color: '#14AFF1',\r\n                fontSize: '20px',\r\n\r\n            },\r\n            contained: {\r\n                // color: '#14aff1',\r\n                width: '4vw',\r\n                fontSize: '10px',\r\n            }\r\n        },\r\n        MuiIconButton: {\r\n            root: {\r\n                color: '#FFFFFF',\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nconst themeCancelButton = createMuiTheme({\r\n    overrides: {\r\n        MuiButton: {\r\n            contained: {\r\n                backgroundColor: '#97A1A9',\r\n                borderRadius: '10px',\r\n                width: '5vw',\r\n                color: 'white',\r\n                fontSize: '10px',\r\n            },\r\n            outlined: {\r\n                border: '1px solid #14AFF1',\r\n                padding: '5px 5px',\r\n                borderRadius: '10px',\r\n                color: 'white',\r\n                fontSize: '10px',\r\n            },\r\n            root: {\r\n                color: '#14AFF1',\r\n                fontSize: '20px',\r\n\r\n            },\r\n            textSizeSmall: {\r\n                padding: '0px'\r\n            },\r\n            label: {\r\n                marginTop: '15.5vh',\r\n            }\r\n        },\r\n        MuiIconButton: {\r\n            root: {\r\n                color: '#FFFFFF',\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n        margin: '0px',\r\n\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction EditPopUp(props) {\r\n    const classes = useStyles();\r\n    const { docId, openPopupEdit, setOpenPopupEdit } = props;\r\n    const [invoiceAmount, setinvoiceAmount] = useState(null)\r\n    const [notes, setnotes] = useState(null)\r\n    const [isSaveButtonPressed, setIsSaveButtonPressed] = useState(false)\r\n    const [isSending, setIsSending] = useState(false)\r\n    const isMounted = useRef(true)\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenPopupEdit(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpenPopupEdit(false);\r\n    };\r\n\r\n    function fetchDataFromApi() {\r\n\r\n        axios.post('http://localhost:8080/1828049/EditInvoiceDataServlet', {\r\n            doc_id: docId,\r\n            updated_amount: invoiceAmount,\r\n            note: notes\r\n        })\r\n            .then((response) => {\r\n                console.log(`EditPopUp Response ${response.data.message}`)\r\n            }, (error) => {\r\n                console.log(`EditPopUp Response ${error}`)\r\n            });\r\n    }\r\n\r\n    const addClickHandeller = e => {\r\n\r\n\r\n        if (invoiceAmount != null && notes != null) {\r\n            setIsSaveButtonPressed(1)\r\n        } else {\r\n            e.preventDefault()\r\n            alert(`Enter Values or go back`)\r\n        }\r\n    }\r\n\r\n    const onReset = e => {\r\n        setinvoiceAmount('')\r\n        setnotes('')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={themeDialogBox}>\r\n                <Dialog open={openPopupEdit}>\r\n                    <DialogTitle>\r\n                        <Grid container>\r\n                            <Grid item xs={11}>\r\n                                <div color='#FFFFFF' >\r\n\r\n                                    <span style={{ color: 'white' }}>Edit Invoice</span>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <ThemeProvider theme={themeAddButton}>\r\n                                    <IconButton aria-label=\"delete\" onClick={handleClose} color=\"white\">\r\n                                        <CloseIcon />\r\n                                    </IconButton>\r\n                                </ThemeProvider>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogTitle>\r\n                    <DialogContent dividers>\r\n\r\n\r\n\r\n\r\n                        <form onSubmit={addClickHandeller}>\r\n                            <Grid container>\r\n                                <Grid item xs={12} container>\r\n                                    <Grid item xs={4}>\r\n                                        <p className=\"add-moodle-tag\">Invoice Amount</p>\r\n                                        <p className=\"add-moodle-tag\">Notes</p>\r\n                                        {/* <ThemeProvider theme={themeCancelButton}>\r\n                                            <Button size=\"small\" className={classes.margin} onClick={handleClose} >\r\n                                                Cancel\r\n        </Button>\r\n                                        </ThemeProvider> */}\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={8}>\r\n                                        <input className=\"add-moodle-input\" style={{ marginTop: '10px' }} value={invoiceAmount} name='INVOICE_AMOUNT' onChange={e => setinvoiceAmount(e.target.value)}></input>\r\n                                        <textarea style={{ outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '14vw', height: '18vh', margin: '0.9vw 0.2vw 0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} name=\"comment\" form=\"usrform\" resize='none' value={notes} onChange={e => setnotes(e.target.value)}></textarea>\r\n\r\n                                        <div style={{ marginTop: '10px' }}>\r\n                                            {/* <ThemeProvider theme={themeAddButton}>\r\n                                                <Button variant=\"outlined\" className={classes.margin} onClick={() => onReset()} style={{ flexDirection: 'row', alignItems: 'flex-end', marginLeft: '5vw', marginRight: '1.25vw' }}>\r\n                                                    Clear\r\n                                                </Button>\r\n                                                <Button variant=\"contained\" className={classes.margin} type='submit' onClick={() => fetchDataFromApi()} style={{ background: '#14AFF1', borderRadius: '10px' }}>\r\n                                                    Save\r\n                                                </Button>\r\n                                            </ThemeProvider> */}\r\n                                        </div>\r\n\r\n\r\n\r\n                                    </Grid>\r\n\r\n                                    {/* <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                \r\n                                    <label style={{ display: 'inline', maxWidth: '18vw', marginRight: '3vw' }}>\r\n                                        <span>Invoice Amount</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n                                    <input style={{ border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '3vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} className=\"customInput\" value={invoiceAmount} name='INVOICE_AMOUNT' onChange={e => setinvoiceAmount(e.target.value)}></input>\r\n                                </div>\r\n\r\n                                <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                    <label style={{ display: 'block', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        Notes\r\n                                        \r\n                                    </label>\r\n                                    <textarea style={{ border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '19vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} name=\"comment\" form=\"usrform\" resize='none' value={notes} onChange={e => setnotes(e.target.value)}></textarea>\r\n                                </div> */}\r\n                                    {/* <ThemeProvider theme={themeAddButton}>\r\n                                        <Button size=\"small\" className={classes.margin} onClick={handleClose} >\r\n                                            Cancel\r\n        </Button>\r\n                                    </ThemeProvider>\r\n\r\n                                    <ThemeProvider theme={themeAddButton}>\r\n                                        <Button variant=\"outlined\" className={classes.margin} onClick={() => onReset()}>\r\n                                            Clear\r\n</Button>\r\n                                        <Button variant=\"contained\" className={classes.margin} type='submit' onClick={() => fetchDataFromApi()}>\r\n                                            Save\r\n        </Button>\r\n                                    </ThemeProvider> */}\r\n\r\n\r\n                                </Grid>\r\n\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <ThemeProvider theme={themeAddButton}>\r\n                                <Button size=\"small\" className={classes.margin} onClick={handleClose} >\r\n                                    Cancel\r\n        </Button>\r\n                            </ThemeProvider>\r\n\r\n                            <ThemeProvider theme={themeAddButton}>\r\n                                <Button style={{ marginLeft: '8vw', marginRight: '1.1vw' }} variant=\"outlined\" className={classes.margin} onClick={() => onReset()}>\r\n                                    Clear\r\n</Button>\r\n                                <Button variant=\"contained\" className={classes.margin} type='submit' onClick={() => fetchDataFromApi()} style={{ borderRadius: '10px', backgroundColor: '#14AFF1' }}>\r\n                                    Save\r\n        </Button>\r\n                            </ThemeProvider>\r\n                        </form>\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </ThemeProvider>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditPopUp\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\DeletePopUp.js",["167","168","169","170","171","172","173","174","175"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios'\r\nimport { useState, useEffect, useCallback, useRef } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport '../App.css'\r\n\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n        backgroundColor: '#2A3F4D 0% 0% no-repeat padding-box',\r\n    },\r\n}))(MuiDialogActions);\r\n\r\n\r\nconst themeDeleteDialogBox = createMuiTheme({\r\n    overrides: {\r\n        MuiButton: {\r\n            outlinedPrimary: {\r\n                hover: {\r\n                    border: '1px solid green',\r\n                    backgroundColor: 'yellow',\r\n                },\r\n                color: 'white',\r\n                borderColor: '#14AFF1',\r\n                borderRadius: '10px',\r\n            },\r\n            contained: {\r\n                backgroundColor: 'red',\r\n                borderRadius: '10px',\r\n            }\r\n        },\r\n\r\n        MuiDialogActions: {\r\n            spacing: {\r\n                backgroundColor: 'green',\r\n            },\r\n        }\r\n    },\r\n\r\n});\r\n\r\n\r\nfunction DeletePopUp(props) {\r\n    const { checkList, openPopupDelete, setOpenPopupDelete } = props;\r\n    const [deleteButtonPress, setDeleteButtonPress] = useState(0)\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenPopupDelete(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpenPopupDelete(false);\r\n    };\r\n\r\n    function fetchDataFromApi() {\r\n        // const myArray = ['1', '2', '3', '4', '5']\r\n        axios.post('http://localhost:8080/1828049/DeleteInvoiceDataServlet', {\r\n            // doc_id: docId,\r\n            arr: checkList\r\n        })\r\n            .then((response) => {\r\n                console.log(`DeletePopUp Response ${response.data.message}`)\r\n                handleClose()\r\n            }, (error) => {\r\n                console.log(`DeletePopUp Response ${error}`)\r\n                handleClose()\r\n            });\r\n    }\r\n\r\n    const deleteClickHandeller = e => {\r\n        fetchDataFromApi()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={themeDeleteDialogBox}>\r\n                <Dialog\r\n                    onClose={handleClose}\r\n                    open={openPopupDelete}>\r\n\r\n                    <DialogTitle id=\"dialog\" onClose={handleClose}>\r\n                        Delete record(s)?\r\n          </DialogTitle>\r\n                    <DialogContent dividers id=\"dialog\">\r\n                        <Typography gutterBottom>\r\n                            You'll lose your record(s) after this action. We can't recover them once you delete.\r\n            </Typography>\r\n                        <Typography gutterBottom>\r\n                            Are you sure you want to <text id=\"tex\">permanently delete</text> them?\r\n            </Typography>\r\n                    </DialogContent>\r\n                    <DialogActions dividers id=\"dialog\">\r\n                        <Button autoFocus onClick={handleClose} color=\"primary\" variant=\"outlined\" style={{ textTransform: 'none' }}>\r\n                            Cancel\r\n            </Button>\r\n                        {/* <Button type='submit' autoFocus onClick={() => fetchDataFromApi()} color=\"primary\" variant=\"contained\" style={{ textTransform: 'none', backgroundColor: '#14AFF1' }}>\r\n                            Delete\r\n            </Button> */}\r\n                        <form onSubmit={deleteClickHandeller}>\r\n                            <Button type='submit' autoFocus color=\"primary\" variant=\"contained\" style={{ textTransform: 'none', backgroundColor: '#14AFF1' }}>\r\n                                Delete\r\n            </Button>\r\n                        </form>\r\n\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </ThemeProvider>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default DeletePopUp\r\n\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\MyPopUp.js",["176","177","178","179","180","181","182","183","184"],"import React from 'react'\r\nimport { Dialog, DialogTitle, DialogContent } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport axios from 'axios'\r\nimport { useState, useEffect } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport '../App.css'\r\n\r\n\r\nconst themeDialogBox = createMuiTheme({\r\n    overrides: {\r\n        MuiDialog: {\r\n            paperWidthSm: {\r\n                maxWidth: '66vw',\r\n            },\r\n        },\r\n        MuiPaper: {\r\n\r\n            rounded: {\r\n                width: '75vw',\r\n                background: '#2A3E4C'\r\n            },\r\n        }\r\n    },\r\n});\r\n\r\nconst themeDatePicker = createMuiTheme({\r\n    overrides: {\r\n        MuiPopover: {\r\n            paper: {\r\n                outline: '0',\r\n                position: 'absolute',\r\n                maxWidth: 'calc(19% - 0px)',\r\n                minWidth: '16px',\r\n                maxHeight: 'calc(119% - 108px)',\r\n                minHeight: '21px',\r\n                overflowX: 'hidden',\r\n                overflowY: 'auto',\r\n                marginBlockStart: '1px',\r\n                marginLeft: '35px',\r\n            },\r\n            root: {\r\n                color: '#356680',\r\n            },\r\n            rounded: {\r\n                borderRadius: '10px',\r\n            }\r\n        },\r\n        MuiPickersCalenda: {\r\n            week: {\r\n                display: 'flex',\r\n                justifyContent: 'center',\r\n                background: '#223746',\r\n            }\r\n        },\r\n        MuiPickersBasePicker: {\r\n            pickerView: {\r\n                display: 'flex',\r\n                maxWidth: '355px',\r\n                minWidth: '274px',\r\n                minHeight: '305px',\r\n                overflowX: 'hidden',\r\n                flexDirection: 'column',\r\n                justifyContent: 'center',\r\n            }\r\n        },\r\n        MuiPaper: {\r\n\r\n            rounded: {\r\n                width: '75vw',\r\n                background: '#2A3E4C'\r\n            },\r\n            root: {\r\n                color: 'white',\r\n                backgroundColor: '#bd0a0a',\r\n            }\r\n        },\r\n\r\n        MuiIconButton: {\r\n            root: {\r\n                flex: '0 0 auto',\r\n                color: 'white',\r\n                padding: '12px',\r\n                overflow: 'visible',\r\n                fontSize: '1.5rem',\r\n                textAlign: 'center',\r\n                borderRadius: '50%',\r\n            }\r\n        },\r\n        MuiButtonBase: {\r\n            root: {\r\n                color: 'white'\r\n            }\r\n        },\r\n        MuiPickersDay: {\r\n            daySelected: {\r\n                color: '#fff',\r\n                fontWeight: '500',\r\n                backgroundColor: '#14AFF1',\r\n            },\r\n            day: {\r\n                color: '#97A1A9'\r\n            }\r\n        },\r\n        MuiPickersCalendarHeader: {\r\n            iconButton: {\r\n                backgroundColor: '#223746',\r\n            },\r\n            dayLabel: {\r\n                color: '#97A1A9',\r\n                width: '36px',\r\n                margin: '0 2px',\r\n                textAlign: 'center',\r\n            }\r\n        },\r\n        MuiOutlinedInput: {\r\n            input: {\r\n                padding: '4.5px 10px',\r\n                width: '12vw',\r\n                height: '4vh',\r\n                // marginBottom: '15px',\r\n                // padding: '2px',\r\n            },\r\n            adornedEnd: {\r\n                paddingRight: '14px',\r\n                color: 'white',\r\n            },\r\n            root: {\r\n                position: 'relative',\r\n                borderRadius: '10px',\r\n                marginTop: '10px'\r\n            }\r\n        },\r\n        MuiInputBase: {\r\n            root: {\r\n                color: 'white'\r\n            }\r\n        },\r\n        // MuiOutlinedInput: {\r\n        //     root: {\r\n        //         position: 'relative',\r\n        //         borderRadius: '10px',\r\n        //     }\r\n        // }\r\n\r\n\r\n    },\r\n});\r\n\r\nconst themeAddButton = createMuiTheme({\r\n    overrides: {\r\n        MuiButton: {\r\n            contained: {\r\n                backgroundColor: '#97A1A9',\r\n                borderRadius: '10px',\r\n                width: '5vw',\r\n                color: 'white',\r\n                fontSize: '10px',\r\n            },\r\n            outlined: {\r\n                border: '1px solid #14AFF1',\r\n                padding: '5px 5px',\r\n                borderRadius: '10px',\r\n                color: 'white',\r\n                fontSize: '10px',\r\n            },\r\n            root: {\r\n                color: '#14AFF1',\r\n                fontSize: '20px',\r\n\r\n            }\r\n        },\r\n        MuiIconButton: {\r\n            root: {\r\n                color: '#FFFFFF',\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    extendedIcon: {\r\n        marginRight: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction MyPopUp(props) {\r\n    const classes = useStyles();\r\n    const { title, children, openPopup, setOpenPopup } = props;\r\n    const [customerName, setcustomerName] = useState(null)\r\n    const [customerNo, setcustomerNo] = useState(null)\r\n    const [invoiceNo, setinvoiceNo] = useState(null)\r\n    const [invoiceAmount, setinvoiceAmount] = useState(null)\r\n    const [dueDate, setdueDate] = useState(null)\r\n    const [notes, setnotes] = useState(null)\r\n    const [isAddButtonPressed, setIsAddButtonPressed] = useState(0)\r\n\r\n\r\n    const [selectedDate, setSelectedDate] = React.useState(new Date());\r\n\r\n    const handleDateChange = (date) => {\r\n        setSelectedDate(convert(date));\r\n        console.log(`Date = ${selectedDate}`)\r\n    };\r\n\r\n    function convert(str) {\r\n        var date = new Date(str),\r\n            mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n            day = (\"0\" + date.getDate()).slice(-2);\r\n        return [date.getFullYear(), mnth, day].join(\"-\");\r\n    }\r\n    const handleClickOpen = () => {\r\n        setOpenPopup(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpenPopup(false);\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //     axios.get(`http://localhost:8080/1828049/AddInvoiceDataServlet`,{\r\n    //         params: {\r\n    //             customer_name: customerName,\r\n    //             customer_no:customerNo,\r\n    //             invoice_no: invoiceNo,\r\n    //             invoice_amount: invoiceAmount,\r\n    //             due_date:dueDate,\r\n    //             notes:notes\r\n    //         }\r\n    //       })\r\n    //         .then(response => {\r\n    //             console.log(response)\r\n    //             // setPost(response.data)\r\n    //         })\r\n    //         .catch(error => {\r\n    //             console.log(error)\r\n    //         })\r\n\r\n    // }, [isAddButtonPressed])\r\n\r\n    function apiCall() {\r\n        axios.get(`http://localhost:8080/1828049/AddInvoiceDataServlet`, {\r\n            params: {\r\n                customer_name: customerName,\r\n                customer_no: customerNo,\r\n                invoice_no: invoiceNo,\r\n                invoice_amount: invoiceAmount,\r\n                due_date: selectedDate,\r\n                notes: notes\r\n            }\r\n        })\r\n            .then(response => {\r\n                console.log(`AddInvoiceDataServlet ${response}`)\r\n                // setPost(response.data)\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    }\r\n\r\n    const addClickHandeller = e => {\r\n        if (customerName != null && customerNo != null && invoiceAmount != null && invoiceNo != null && selectedDate != null) {\r\n            apiCall()\r\n        } else {\r\n            e.preventDefault()\r\n            alert(`Enter mandatoryvalues`)\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    const onReset = e => {\r\n        setcustomerName('')\r\n        setcustomerNo('')\r\n        setinvoiceAmount('')\r\n        setinvoiceAmount('')\r\n        setinvoiceNo('')\r\n        setdueDate('')\r\n        setnotes('')\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <ThemeProvider theme={themeDialogBox}>\r\n                <Dialog open={openPopup}>\r\n                    <DialogTitle>\r\n                        <Grid container>\r\n                            <Grid item xs={11}>\r\n                                <div color='#FFFFFF' >\r\n\r\n                                    <span style={{ color: 'white' }}>Add Invoice</span>\r\n                                </div>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                                <ThemeProvider theme={themeAddButton}>\r\n                                    <IconButton aria-label=\"delete\" onClick={handleClose} color=\"white\">\r\n                                        <CloseIcon />\r\n                                    </IconButton>\r\n                                </ThemeProvider>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n                    </DialogTitle>\r\n                    <DialogContent dividers>\r\n\r\n\r\n\r\n\r\n                        <form onSubmit={addClickHandeller}>\r\n                            <Grid container>\r\n                                <Grid item xs={6} container>\r\n                                    <Grid item xs={4}>\r\n                                        {/* <label >\r\n                                        <span>Customer Name</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label> */}\r\n\r\n                                        <p className=\"add-moodle-tag\">Customer Name<span style={{ color: 'red', fontSize: '15px' }}>*</span></p>\r\n                                        <p className=\"add-moodle-tag\">Customer No.<span style={{ color: 'red', fontSize: '15px' }}>*</span></p>\r\n                                        <p className=\"add-moodle-tag\">Invoice No.<span style={{ color: 'red', fontSize: '15px' }}>*</span></p>\r\n                                        <p className=\"add-moodle-tag\">Invoice Amount<span style={{ color: 'red', fontSize: '15px' }}>*</span></p>\r\n                                        <ThemeProvider theme={themeAddButton}>\r\n                                            <Button size=\"small\" className={classes.margin} onClick={handleClose} >\r\n                                                Cancel\r\n        </Button>\r\n                                        </ThemeProvider>\r\n\r\n                                        {/* <label >\r\n                                        <span>Customer No.</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n\r\n                                    <label >\r\n                                        <span>Invoice No.</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n\r\n                                    <label >\r\n                                        <span>Invoice Amount</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label> */}\r\n\r\n                                    </Grid>\r\n                                    <Grid item xs={8} style={{ marginTop: '1vh' }}>\r\n                                        <input className=\"add-moodle-input\" value={customerName} name='CUSTOMER_NAME' onChange={e => setcustomerName(e.target.value)} ></input>\r\n                                        <input className=\"add-moodle-input\" value={customerNo} name='CUSTOMER_NO' onChange={e => setcustomerNo(e.target.value)}></input>\r\n                                        <input className=\"add-moodle-input\" value={invoiceNo} name='INVOICE_NO' onChange={e => setinvoiceNo(e.target.value)}></input>\r\n                                        <input className=\"add-moodle-input\" value={invoiceAmount} name='INVOICE_AMOUNT' onChange={e => setinvoiceAmount(e.target.value)}></input>\r\n                                    </Grid>\r\n                                    {/* <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                    \r\n                                    <label style={{ display: 'inline', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        <span>Customer Name</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n                                    <input style={{ outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '3vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} className=\"customInput\" value={customerName} name='CUSTOMER_NAME' onChange={e => setcustomerName(e.target.value)}></input>\r\n                                </div>\r\n\r\n                                <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                    \r\n                                    <label style={{ display: 'inline', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        <span>Customer No.</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n                                    <input style={{outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '3vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} className=\"customInput\" value={customerNo} name='CUSTOMER_NO' onChange={e => setcustomerNo(e.target.value)}></input>\r\n                                </div>\r\n\r\n\r\n                                <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                    \r\n                                    \r\n                                    <label style={{ display: 'inline', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        <span>Invoice No.</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n                                    <input style={{outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '3vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} className=\"customInput\" value={invoiceNo} name='INVOICE_NO' onChange={e => setinvoiceNo(e.target.value)}></input>\r\n                                </div>\r\n\r\n\r\n                                <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                \r\n                                    <label style={{ display: 'inline', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        <span>Invoice Amount</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n                                    <input style={{outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '3vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} className=\"customInput\" value={invoiceAmount} name='INVOICE_AMOUNT' onChange={e => setinvoiceAmount(e.target.value)}></input>\r\n                                </div>\r\n                                <ThemeProvider theme={themeAddButton}>\r\n                                <Button size=\"small\" className={classes.margin} onClick={handleClose} >\r\n          Cancel\r\n        </Button>\r\n                                </ThemeProvider>\r\n                                 */}\r\n\r\n\r\n                                </Grid>\r\n\r\n                                <Grid item xs={6} container>\r\n                                    {/* <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                    <label style={{ display: 'inline', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        <span>Due Date</span>\r\n                                        <span style={{ color: 'red', fontSize: '15px' }}>*\r\n                                       </span>\r\n                                    </label>\r\n                                    <input style={{outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '3vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} className=\"customInput\" type='date' value={dueDate} name='DUE_DATE' onChange={e => setdueDate(e.target.value)} />\r\n                                </div>\r\n\r\n                                <div style={{ color: '#97A1A9', fontSize: '15px', marginTop: '10px', marginLeft: '10px', marginRight: '10px', marginBottom: '15px' }}>\r\n                                    <label style={{ display: 'block', maxWidth: '10vw', marginRight: '2vw' }}>\r\n                                        Notes\r\n                                        \r\n                                    </label>\r\n                                    \r\n                                    <textarea style={{outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '19vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} name=\"comment\" form=\"usrform\" resize='none' value={notes} onChange={e => setnotes(e.target.value)}></textarea>\r\n                                </div> */}\r\n                                    <Grid item xs={4}>\r\n\r\n                                        <p className=\"add-moodle-tag\">Due Date<span style={{ color: 'red', fontSize: '15px' }}>*</span></p>\r\n                                        <p className=\"add-moodle-tag\">Notes</p>\r\n\r\n\r\n                                    </Grid>\r\n\r\n                                    <Grid item xs={8}>\r\n                                        <ThemeProvider theme={themeDatePicker}>\r\n                                            <MuiPickersUtilsProvider utils={DateFnsUtils}  >\r\n                                                <KeyboardDatePicker disableToolbar inputVariant=\"outlined\" id=\"due_in_date\"\r\n                                                    variant=\"inline\"\r\n                                                    format=\"dd-MM-yyyy\"\r\n                                                    // margin=\"normal\"\r\n                                                    //id=\"date-picker-inline\"\r\n                                                    //label=\"Due in Date\"\r\n                                                    value={selectedDate}\r\n                                                    name=\"due_in_date\"\r\n                                                    onChange={handleDateChange}\r\n                                                    KeyboardButtonProps={{\r\n                                                        'aria-label': 'change date',\r\n                                                    }}\r\n\r\n\r\n                                                />\r\n                                            </MuiPickersUtilsProvider>\r\n                                        </ThemeProvider>\r\n                                        {/* style={{ outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '15vw', height: '19vh', margin: '0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} */}\r\n                                        <textarea style={{ outline: 'none', border: '1px solid #356680', borderRadius: '10px', width: '16vw', height: '18vh', margin: '0.9vw 0.2vw 0.1vw 0.2vw', padding: '0px 0.5vw', color: 'white', backgroundColor: '#283A46' }} name=\"comment\" form=\"usrform\" resize='none' value={notes} onChange={e => setnotes(e.target.value)}></textarea>\r\n\r\n                                        {/* <ThemeProvider theme={themeAddButton}>\r\n                                            <Button variant=\"outlined\" className={classes.margin} onClick={() => onReset()} >\r\n                                                Clear\r\n</Button>\r\n                                            <Button variant=\"contained\" className={classes.margin} type='submit'>\r\n                                                Add\r\n        </Button>\r\n                                        </ThemeProvider> */}\r\n\r\n                                        <ThemeProvider theme={themeAddButton}>\r\n                                            <Button variant=\"outlined\" className={classes.margin} onClick={() => onReset()} style={{ flexDirection: 'row', alignItems: 'flex-end', marginLeft: '7.7vw', marginRight: '1.25vw', borderRadius: '10px' }}>\r\n                                                Clear\r\n                                                </Button>\r\n                                            <Button variant=\"contained\" type='submit' style={{ background: '#14AFF1', borderRadius: '10px', width: '4vw' }} type='submit'>\r\n                                                Add\r\n                                                </Button>\r\n                                        </ThemeProvider>\r\n\r\n                                    </Grid>\r\n\r\n                                    <div>\r\n\r\n\r\n\r\n                                    </div>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </form>\r\n\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </ThemeProvider>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPopUp\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\ViewCorrospondancePopUp.js",["185","186","187"],"import React from 'react'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport { useEffect, useState } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nconst styles = (theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(2),\r\n    },\r\n    closeButton: {\r\n        position: 'absolute',\r\n        right: theme.spacing(1),\r\n        top: theme.spacing(1),\r\n        color: theme.palette.grey[500],\r\n    },\r\n});\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n    const { children, classes, onClose, ...other } = props;\r\n    return (\r\n        <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n            <Typography variant=\"h6\">{children}</Typography>\r\n            {onClose ? (\r\n                <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </MuiDialogTitle>\r\n    );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(2),\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n    root: {\r\n        margin: 0,\r\n        padding: theme.spacing(1),\r\n        backgroundColor: '#2A3F4D 0% 0% no-repeat padding-box',\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nfunction ViewCorrospondancePopUp(props) {\r\n    const { finalCheckItemList, openPopupViewCorrospondance, setOpenPopupViewCorrospondance } = props;\r\n    console.log(`Inside ViewCorrospondancePopUp : finalCheckItemList=${finalCheckItemList.map(e => e.nameCustomer)}`)\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setOpenPopupViewCorrospondance(true);\r\n    };\r\n    const handleClose = () => {\r\n        setOpenPopupViewCorrospondance(false);\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n            {/* <button id=\"b2\" onClick={handleClickOpen}>View Correspondence</button> */}\r\n            <Dialog\r\n                onClose={handleClose}\r\n                //aria-labelledby=\"customized-dialog-title\" \r\n                open={openPopupViewCorrospondance}\r\n                maxWidth=\"true\">\r\n\r\n                <DialogTitle dividers id=\"dialog\" onClose={handleClose}>\r\n                    View Corrospondence (2)?\r\n        </DialogTitle>\r\n                <DialogContent dividers id=\"dialog\">\r\n                    <Typography style={{ color: \"#C0C6CA\" }}>\r\n                        Subject: Invoice Details -\r\n          <br /><br />\r\n          Dear Sir/Madam,\r\n          <br /><br />\r\n          Gentle reminder that you have one or more open invoices on your account.\r\n          <br />\r\n          Please get back to us with an expected date of payment. If you have any specific issue with the invoice(s), please let us know so that we can address it at the earliest.\r\n          <br /><br />\r\n          Please find the details of the invoices below:\r\n          </Typography>\r\n                    <Typography>\r\n                        <div id=\"scrollableDiv\" className=\"app\">\r\n\r\n                            <Table>\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"left\">Invoice Number </TableCell>\r\n                                        <TableCell align=\"left\">PO Number </TableCell>\r\n                                        <TableCell align=\"left\">Invoice Date</TableCell>\r\n                                        <TableCell align=\"left\">Due Date</TableCell>\r\n                                        <TableCell align=\"left\">Currency</TableCell>\r\n                                        <TableCell align=\"left\">Open Amount</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n                                    {finalCheckItemList?.map((row, i) => (\r\n                                        <TableRow key={i}>\r\n                                            <TableCell align=\"left\">{row.invoiceId}</TableCell>\r\n                                            <TableCell align=\"left\">{row.custNumber}</TableCell>\r\n                                            <TableCell align=\"left\">{row.documentCreateDate}</TableCell>\r\n                                            <TableCell align=\"left\">{row.dueInDate}</TableCell>\r\n                                            <TableCell align=\"left\">{row.invoiceCurrency}</TableCell>\r\n                                            <TableCell align=\"left\">{row.totalOpenAmount}</TableCell>\r\n\r\n\r\n                                        </TableRow>\r\n                                    ))}\r\n                                </TableBody>\r\n                            </Table>\r\n\r\n                        </div>\r\n                    </Typography>\r\n                    <Typography>\r\n                        In case you have already made a payment for the above items, please send us the details to ensure the payment is posted.\r\n          <br />\r\n          Let us know if we can be of any further assistance.\r\n          <br />\r\n          Looking forward to hearing from you.\r\n          <br />\r\n          Kind Regards,\r\n          <br />\r\n          [Sender’s First Name] [Sender’s Last Name]\r\n          <br />\r\n          Phone : [Sender’s contact number]\r\n          <br />\r\n          Fax : [If any]\r\n          <br />\r\n          Email : [Sender’s Email Address]\r\n          <br />\r\n          Company Name[Sender’s Company Name]\r\n          </Typography>\r\n                </DialogContent>\r\n                <DialogActions dividers id=\"dialog\">\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\" variant=\"outlined\" style={{ textTransform: 'none' }}>\r\n                        Cancel\r\n          </Button>\r\n                    <Button autoFocus onClick={handleClose} color=\"primary\" variant=\"contained\" style={{ textTransform: 'none' }}>\r\n                        Download\r\n          </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ViewCorrospondancePopUp\r\n","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\VC.js",["188","189","190","191","192","193","194","195"],"import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { pxToRem, pxToVh, pxToVw } from \"../utils/theme\";\r\nimport { Button, Grid } from '@material-ui/core';\r\n//import img3 from '../assets/delete.svg';\r\n//import '../Table.css';\r\nimport { makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport GeneratePdf from './GeneratePdf';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: pxToRem(650),\r\n  },\r\n  tableRow: {\r\n    borderBottom: \"none\"\r\n\r\n  },\r\n  viewCor: {\r\n    \"& .MuiPaper-rounded\": {\r\n      width: \"100vh\"\r\n    },\r\n    backgroundColor: '#273D49CC',\r\n    color: '#97A1A9',\r\n    border: '1px #97A1A9 solid',\r\n    marginRight: pxToRem(250),\r\n    borderRadius: pxToRem(10)\r\n\r\n  },\r\n  DialogBox: {\r\n    //width:pxToVw(1200),\r\n  },\r\n  dd: {\r\n\r\n    color: \"white\",\r\n    background: \"#97A1A9 0% 0 % no - repeat padding- box\",\r\n    backgroundColor: \"#14AFF1\",\r\n    borderRadius: pxToRem(10),\r\n    opacity: \"1\",\r\n    marginLeft: \"0.5rem\",\r\n  },\r\n  cancel: {\r\n    // width: pxToRem(106),\r\n    // height: pxToRem(45),\r\n    color: \"#14AFF1\",\r\n    // background: \"#97A1A9 0% 0 % no - repeat padding- box\",\r\n    // backgroundColor: \"#14AFF1\",\r\n    borderRadius: pxToRem(10),\r\n    opacity: \"1\",\r\n    // marginTop: \"0.3rem\",\r\n    // marginLeft: \"3rem\",\r\n    // marginRight:\"22rem\"\r\n  }\r\n});\r\n\r\nfunction createData(CustomerName, CustomerNo, bill_id, Invoice_amount, Duedate) {\r\n  return { CustomerName, CustomerNo, bill_id, Invoice_amount, Duedate };\r\n}\r\n\r\nconst rows = [\r\n  createData('KRAFTUS', \"CCCA02\", 1928511027, 1454.21, \"Feb 8,2019\"),\r\n  createData('W H', 200386051, 1928512738, 17197.44, \"Jan 24, 2019\"),\r\n];\r\n\r\nconst styles = (theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: pxToRem(20),\r\n  },\r\n  closeButton: {\r\n    position: 'absolute',\r\n    right: pxToRem(10),\r\n    top: pxToRem(10),\r\n    color: theme.palette.grey[500],\r\n  },\r\n\r\n});\r\n\r\n\r\nconst DialogTitle = withStyles(styles)((props) => {\r\n  const { children, classes, handleClose, ...other } = props;\r\n  return (\r\n    <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n      <Typography variant=\"h6\">{children}</Typography>\r\n      {handleClose ? (\r\n        <IconButton aria-label=\"close\" className={classes.closeButton} onClick={handleClose}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      ) : null}\r\n    </MuiDialogTitle>\r\n  );\r\n});\r\n\r\nconst DialogContent = withStyles((theme) => ({\r\n  root: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}))(MuiDialogActions);\r\n\r\nconst themeVc = createMuiTheme({\r\n  overrides: {\r\n    MuiIconButton: {\r\n      paperWidthSm: {\r\n        maxWidth: '25vw',\r\n      },\r\n    },\r\n    MuiPaper: {\r\n\r\n      rounded: {\r\n        width: '65vw',\r\n        background: '#2A3E4C'\r\n      },\r\n    }\r\n  },\r\n});\r\n\r\nexport default function ViewCorrespondenceModal({ totalAmount, finalCheckItemList, openPopupViewCorrospondance, setOpenPopupViewCorrospondance }) {\r\n  const [addAmount, setAddAmount] = React.useState(0);\r\n  const classes = useStyles();\r\n\r\n  console.log(`total_amount = ${totalAmount}`)\r\n  const handleClickOpen = () => {\r\n    setOpenPopupViewCorrospondance(true);\r\n  };\r\n  const handleClose = () => {\r\n    setOpenPopupViewCorrospondance(false);\r\n  };\r\n\r\n  // function addAllAmount() {\r\n  //   console.log('Inside addAllAmount')\r\n  //   let sum = 0.0\r\n  //   for (let i = 0; i < finalCheckItemList.length; i++) {\r\n  //     console.log(`sum = ${sum}`)\r\n  //     sum += parseFloat(finalCheckItemList[i].totalOpenAmount)\r\n  //   }\r\n  //   setAddAmount(sum)\r\n  // }\r\n\r\n  function preparationForDownload() {\r\n    // addAllAmount()\r\n    GeneratePdf(totalAmount, finalCheckItemList)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Dialog\r\n        open={openPopupViewCorrospondance}\r\n        onClose={handleClose}\r\n        className={classes.DialogBox}\r\n        maxWidth=\"lg\"\r\n      >\r\n        <DialogTitle id=\"view_dialog\" onClose={handleClose} style={{ backgroundColor: \"#2A3E4C\" }} maxWidth=\"lg\">\r\n\r\n          <Grid container>\r\n            <Grid item xm={11} sm={11}>\r\n              <div color='#FFFFFF' >\r\n\r\n                <span style={{ color: 'white' }}>View Correspondence (2)</span>\r\n              </div>\r\n            </Grid>\r\n\r\n            <Grid xm={1} sm={1}>\r\n              <IconButton aria-label=\"delete\" onClick={handleClose} color=\"white\">\r\n                <CloseIcon />\r\n              </IconButton>\r\n            </Grid>\r\n\r\n          </Grid>\r\n        </DialogTitle>\r\n        <DialogContent dividers id=\"delete_dialog\" style={{ backgroundColor: \"#2A3E4C\", color: \"#97A1A9\" }} >\r\n          <Typography gutterBottom>\r\n            Subject :\r\n            <span style={{ color: \"#fff\" }}>\r\n              Invoice Details -[ Account Name ]\r\n            </span>\r\n            <br></br><br></br> Dear Sir/Madam,<br></br> Greetings!<br></br><br></br> This is to remind you that there are one or more open invoices on your account. Please provide at your earliest convenience an update on the payment details or clarify the reason for the delay. If you have any specific issue with the invoice(s), please let us know so that we can address it to the correct Department.<br></br> <br></br>Please find the details of the invoices below:\r\n            </Typography>\r\n          <Typography gutterBottom>\r\n\r\n            <TableContainer component={Paper} style={{ backgroundColor: \"#2A3E4C\", color: \"#97A1A9\" }}>\r\n              <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell className={classes.tableRow} style={{ color: \"#97A1A9\" }}>Customer Name</TableCell>\r\n                    <TableCell className={classes.tableRow} align=\"right\" style={{ color: \"#97A1A9\" }}>Invoice Number</TableCell>\r\n                    <TableCell className={classes.tableRow} align=\"right\" style={{ color: \"#97A1A9\" }}>PO Number</TableCell>\r\n                    <TableCell className={classes.tableRow} align=\"right\" style={{ color: \"#97A1A9\" }}>Invoice date</TableCell>\r\n                    <TableCell className={classes.tableRow} align=\"right\" style={{ color: \"#97A1A9\" }}>Due Date</TableCell>\r\n                    <TableCell className={classes.tableRow} align=\"right\" style={{ color: \"#97A1A9\" }}>Currency</TableCell>\r\n                    <TableCell className={classes.tableRow} align=\"right\" style={{ color: \"#97A1A9\" }}>Open Amount($)</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                  {finalCheckItemList.map((row) => (\r\n                    <TableRow key={row.name}>\r\n                      <TableCell component=\"th\" scope=\"row\" style={{ color: \"#FFF\" }} className={classes.tableRow}>\r\n                        {row.nameCustomer}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\" className={classes.tableRow} style={{ color: \"#FFF\" }}>{row.invoiceId}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.tableRow} style={{ color: \"#FFF\" }}>{row.custNumber}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.tableRow} style={{ color: \"#FFF\" }}>{row.documentCreateDate}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.tableRow} style={{ color: \"#FFF\" }}>{row.dueInDate}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.tableRow} style={{ color: \"#FFF\" }}>{row.invoiceCurrency}</TableCell>\r\n                      <TableCell align=\"right\" className={classes.tableRow} style={{ color: \"#FFF\" }}>{row.totalOpenAmount}</TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n\r\n\r\n          </Typography>\r\n          <Typography gutterBottom>\r\n            Total Amount to be Paid :\r\n            <span style={{ color: \"#fff\" }}>\r\n              $124.00K</span>\r\n            <br></br><br></br> In case you have already made a payment for the above items, please send us the details to ensure the payment is posted.<br></br> Let us know if we can be of any further assistance.<br></br> Looking forward to hearing from you.<br></br><br></br> Kind Regards,<br></br> [Sender’s First Name][Sender’s Last Name] <br></br>Phone : [Sender’s contact number]<br></br> Fax : [If any]<br></br> Email : [Sender’s Email Address]<br></br> Company Name[Sender’s Company Name]\r\n            </Typography>\r\n        </DialogContent>\r\n        <DialogActions id=\"delete_dialog\" style={{ backgroundColor: \"#2A3E4C\", color: \"#C0C6CA\" }}>\r\n          <Button className={classes.cancel} autoFocus onClick={handleClose} color=\"primary\" variant=\"content\" id=\"del\" style={{ textTransform: 'none' }}>\r\n            Cancel\r\n            </Button>\r\n\r\n          {/* <Button className={classes.dd} autoFocus onClick={() => GeneratePdf(finalCheckItemList)} color=\"primary\" variant=\"content\" id=\"del1\" style={{ textTransform: 'none' }}>\r\n            Download\r\n            </Button> */}\r\n\r\n          <Button className={classes.dd} autoFocus onClick={() => preparationForDownload()} color=\"primary\" variant=\"content\" id=\"del1\" style={{ textTransform: 'none' }}>\r\n            Download\r\n            </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}","C:\\Users\\KIIT\\Desktop\\Summer_Internship_UI\\Summer_Internship_UI\\src\\MyComponent\\GeneratePdf.js",["196","197","198","199"],"import { jsPDF } from \"jspdf\";\r\nimport \"jspdf-autotable\";\r\n\r\n\r\nconst column = [\r\n    \"Invoice Number\",\r\n    \"PO Number\",\r\n    \"Invioce Date\",\r\n    \"Due Date\",\r\n    \"Currency\",\r\n    \"Open Amount ($)\",\r\n];\r\nfunction createData(ino, po, idate, ddate, curr, amount) {\r\n    let kk = {\r\n        \"Invoice Number\": ino,\r\n        \"PO Number\": po,\r\n        \"Invioce Date\": idate,\r\n        \"Due Date\": ddate,\r\n        Currency: curr,\r\n        \"Open Amount ($)\": amount,\r\n    };\r\n    return Object.assign({}, kk);\r\n}\r\nconst generateHeader = (column) => {\r\n    var result = [];\r\n    for (var i = 0; i < column.length; i += 1) {\r\n        result.push({\r\n            id: column[i],\r\n            width: 80,\r\n            align: \"center\",\r\n            padding: 0,\r\n        });\r\n    }\r\n    return result;\r\n};\r\nconst header = generateHeader(column);\r\nconst myhtml = \"\";\r\n\r\nfunction genratePdf(addAmount, finalCheckItemList, template, age) {\r\n    // console.log(`Inside genratePdf : finalCheckItemList=${finalCheckItemList.map(e => e.nameCustomer)}`)\r\n    //   let tdata = template.t1;\r\n    //   let header = \"\";\r\n    //   let footer = \"\";\r\n    //   if (age === 20) tdata = template.t2;\r\n\r\n    //   console.log(template);\r\n    //   let data1 = store.getState().invoice.selectedData;\r\n    //   if (Object.keys(template).length > 0) {\r\n    const data = [{\r\n        areaBusiness: \"\",\r\n        baselineCreateDate: \"Jan 1, 2019\",\r\n        businessCode: \"U001\",\r\n        businessYear: 2019,\r\n        clearDate: \"Jan 16, 2019 12:00:00 AM\",\r\n        custNumber: \"0200458131\",\r\n        custPaymentTerms: \"NAA8\",\r\n        docId: 1928501776,\r\n        documentCreateDate: \"Dec 31, 2018\",\r\n        documentType: \"RV\",\r\n        dueInDate: \"Jan 16, 2019\",\r\n        invoiceCurrency: \"USD\",\r\n        invoiceId: 1928501776,\r\n        isOpen: 0,\r\n        nameCustomer: \"TIMES associates\",\r\n        postingDate: \"Jan 1, 2019\",\r\n        postingId: 1,\r\n        totalOpenAmount: 9999.99,\r\n    }]\r\n    let header = `Subject :Invoice Details -[ Account Name ]\r\n\r\n    Dear Sir/Madam,\r\n    Greetings!\r\n    \r\n    This is to remind you that there are one or more open invoices on your account. Please provide at your earliest convenience an update on the payment details or clarify the reason for the delay. If you have any specific issue with the invoice(s), please let us know so that we can address it to the correct Department.\r\n    `;\r\n\r\n    let footer = `Total Amount to be Paid :$124.00K\r\n\r\n    In case you have already made a payment for the above items, please send us the details to ensure the payment is posted.\r\n    Let us know if we can be of any further assistance.\r\n    Looking forward to hearing from you.\r\n    \r\n    Kind Regards,\r\n    [Sender’s First Name][Sender’s Last Name]\r\n    Phone : [Sender’s contact number]`;\r\n    //   }\r\n    function headRows() {\r\n        return [\r\n            {\r\n                id: \"Invoice Number\",\r\n                no: \"PO Number\",\r\n                date: \"Invioce Date\",\r\n                cur: \"Currency\",\r\n                amount: \"amount\",\r\n                ddate: \"Due Date\",\r\n            },\r\n        ];\r\n    }\r\n    function bodyRows() {\r\n        var body = [];\r\n        for (var j = 0; j < finalCheckItemList.length; j++) {\r\n            body.push({\r\n                id: finalCheckItemList[j].invoiceId,\r\n                no: finalCheckItemList[j].custNumber,\r\n                date: finalCheckItemList[j].postingDate,\r\n                cur: finalCheckItemList[j].invoiceCurrency,\r\n                amount: finalCheckItemList[j].totalOpenAmount,\r\n                ddate: finalCheckItemList[j].dueInDate,\r\n            });\r\n        }\r\n        return body;\r\n    }\r\n    // const data = [\r\n    //     createData(\r\n    //         \"1928501770\",\r\n    //         \"1928501770\",\r\n    //         \"Jan 1, 2019\",\r\n    //         \"Jan 16, 2019\",\r\n    //         \"USD\",\r\n    //         \"184.29\"\r\n    //     ),\r\n    // ];\r\n    var doc = new jsPDF();\r\n    doc.setFontSize(18);\r\n    doc.text(\"Invoice Details\", 14, 22);\r\n    doc.setFontSize(11);\r\n    doc.setTextColor(100);\r\n    var pageSize = doc.internal.pageSize;\r\n    var pageWidth = pageSize.width ? pageSize.width : pageSize.getWidth();\r\n    var text = doc.splitTextToSize(header, pageWidth - 35, {});\r\n    doc.text(text, 14, 30);\r\n\r\n    doc.autoTable({\r\n        head: headRows(),\r\n        body: bodyRows(),\r\n        startY: 80,\r\n        showHead: \"firstPage\",\r\n    });\r\n    text = doc.splitTextToSize(footer, pageWidth - 35, {});\r\n    doc.text(text, 14, doc.lastAutoTable.finalY + 10);\r\n    window.open(doc.output(\"bloburl\"), \"_blank\");\r\n};\r\nexport default genratePdf;",{"ruleId":"200","severity":1,"message":"201","line":6,"column":10,"nodeType":"202","messageId":"203","endLine":6,"endColumn":18},{"ruleId":"200","severity":1,"message":"204","line":8,"column":10,"nodeType":"202","messageId":"203","endLine":8,"endColumn":20},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"200","severity":1,"message":"209","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":20},{"ruleId":"200","severity":1,"message":"210","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":26},{"ruleId":"200","severity":1,"message":"211","line":6,"column":27,"nodeType":"202","messageId":"203","endLine":6,"endColumn":33},{"ruleId":"200","severity":1,"message":"212","line":6,"column":35,"nodeType":"202","messageId":"203","endLine":6,"endColumn":40},{"ruleId":"200","severity":1,"message":"213","line":6,"column":42,"nodeType":"202","messageId":"203","endLine":6,"endColumn":48},{"ruleId":"200","severity":1,"message":"214","line":7,"column":10,"nodeType":"202","messageId":"203","endLine":7,"endColumn":21},{"ruleId":"200","severity":1,"message":"215","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":13},{"ruleId":"200","severity":1,"message":"216","line":2,"column":17,"nodeType":"202","messageId":"203","endLine":2,"endColumn":23},{"ruleId":"200","severity":1,"message":"217","line":7,"column":10,"nodeType":"202","messageId":"203","endLine":7,"endColumn":19},{"ruleId":"200","severity":1,"message":"218","line":7,"column":32,"nodeType":"202","messageId":"203","endLine":7,"endColumn":45},{"ruleId":"219","severity":1,"message":"220","line":172,"column":32,"nodeType":"221","messageId":"222","endLine":172,"endColumn":34},{"ruleId":"200","severity":1,"message":"223","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":13},{"ruleId":"200","severity":1,"message":"215","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":13},{"ruleId":"200","severity":1,"message":"224","line":32,"column":11,"nodeType":"202","messageId":"203","endLine":32,"endColumn":18},{"ruleId":"200","severity":1,"message":"225","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":14},{"ruleId":"200","severity":1,"message":"226","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"227","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":18},{"ruleId":"200","severity":1,"message":"228","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":18},{"ruleId":"200","severity":1,"message":"229","line":7,"column":8,"nodeType":"202","messageId":"203","endLine":7,"endColumn":16},{"ruleId":"200","severity":1,"message":"230","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":12},{"ruleId":"200","severity":1,"message":"231","line":9,"column":8,"nodeType":"202","messageId":"203","endLine":9,"endColumn":12},{"ruleId":"200","severity":1,"message":"223","line":10,"column":8,"nodeType":"202","messageId":"203","endLine":10,"endColumn":13},{"ruleId":"200","severity":1,"message":"232","line":12,"column":10,"nodeType":"202","messageId":"203","endLine":12,"endColumn":17},{"ruleId":"200","severity":1,"message":"224","line":48,"column":11,"nodeType":"202","messageId":"203","endLine":48,"endColumn":18},{"ruleId":"233","severity":1,"message":"234","line":66,"column":13,"nodeType":"235","endLine":66,"endColumn":28},{"ruleId":"200","severity":1,"message":"236","line":2,"column":10,"nodeType":"202","messageId":"203","endLine":2,"endColumn":15},{"ruleId":"200","severity":1,"message":"237","line":2,"column":17,"nodeType":"202","messageId":"203","endLine":2,"endColumn":29},{"ruleId":"200","severity":1,"message":"223","line":3,"column":8,"nodeType":"202","messageId":"203","endLine":3,"endColumn":13},{"ruleId":"200","severity":1,"message":"238","line":4,"column":8,"nodeType":"202","messageId":"203","endLine":4,"endColumn":14},{"ruleId":"200","severity":1,"message":"228","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":18},{"ruleId":"200","severity":1,"message":"239","line":6,"column":8,"nodeType":"202","messageId":"203","endLine":6,"endColumn":16},{"ruleId":"200","severity":1,"message":"240","line":7,"column":8,"nodeType":"202","messageId":"203","endLine":7,"endColumn":18},{"ruleId":"200","severity":1,"message":"241","line":8,"column":8,"nodeType":"202","messageId":"203","endLine":8,"endColumn":15},{"ruleId":"200","severity":1,"message":"242","line":9,"column":8,"nodeType":"202","messageId":"203","endLine":9,"endColumn":18},{"ruleId":"200","severity":1,"message":"243","line":10,"column":8,"nodeType":"202","messageId":"203","endLine":10,"endColumn":17},{"ruleId":"200","severity":1,"message":"244","line":11,"column":8,"nodeType":"202","messageId":"203","endLine":11,"endColumn":22},{"ruleId":"200","severity":1,"message":"245","line":14,"column":10,"nodeType":"202","messageId":"203","endLine":14,"endColumn":13},{"ruleId":"200","severity":1,"message":"224","line":107,"column":11,"nodeType":"202","messageId":"203","endLine":107,"endColumn":18},{"ruleId":"233","severity":1,"message":"246","line":125,"column":13,"nodeType":"235","endLine":125,"endColumn":32},{"ruleId":"200","severity":1,"message":"247","line":681,"column":8,"nodeType":"202","messageId":"203","endLine":681,"endColumn":31},{"ruleId":"248","severity":1,"message":"249","line":704,"column":9,"nodeType":"250","messageId":"222","endLine":704,"endColumn":14},{"ruleId":"200","severity":1,"message":"251","line":822,"column":7,"nodeType":"202","messageId":"203","endLine":822,"endColumn":18},{"ruleId":"200","severity":1,"message":"252","line":913,"column":12,"nodeType":"202","messageId":"203","endLine":913,"endColumn":19},{"ruleId":"200","severity":1,"message":"253","line":913,"column":21,"nodeType":"202","messageId":"203","endLine":913,"endColumn":31},{"ruleId":"200","severity":1,"message":"254","line":923,"column":12,"nodeType":"202","messageId":"203","endLine":923,"endColumn":25},{"ruleId":"200","severity":1,"message":"255","line":923,"column":27,"nodeType":"202","messageId":"203","endLine":923,"endColumn":43},{"ruleId":"200","severity":1,"message":"256","line":928,"column":12,"nodeType":"202","messageId":"203","endLine":928,"endColumn":23},{"ruleId":"257","severity":1,"message":"258","line":955,"column":8,"nodeType":"259","endLine":955,"endColumn":23,"suggestions":"260"},{"ruleId":"219","severity":1,"message":"220","line":985,"column":34,"nodeType":"221","messageId":"222","endLine":985,"endColumn":36},{"ruleId":"200","severity":1,"message":"236","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"237","line":4,"column":17,"nodeType":"202","messageId":"203","endLine":4,"endColumn":29},{"ruleId":"200","severity":1,"message":"209","line":4,"column":31,"nodeType":"202","messageId":"203","endLine":4,"endColumn":41},{"ruleId":"200","severity":1,"message":"236","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"237","line":4,"column":17,"nodeType":"202","messageId":"203","endLine":4,"endColumn":29},{"ruleId":"200","severity":1,"message":"209","line":4,"column":31,"nodeType":"202","messageId":"203","endLine":4,"endColumn":41},{"ruleId":"200","severity":1,"message":"236","line":4,"column":10,"nodeType":"202","messageId":"203","endLine":4,"endColumn":15},{"ruleId":"200","severity":1,"message":"237","line":4,"column":17,"nodeType":"202","messageId":"203","endLine":4,"endColumn":29},{"ruleId":"200","severity":1,"message":"209","line":4,"column":31,"nodeType":"202","messageId":"203","endLine":4,"endColumn":41},{"ruleId":"200","severity":1,"message":"261","line":5,"column":8,"nodeType":"202","messageId":"203","endLine":5,"endColumn":15},{"ruleId":"200","severity":1,"message":"262","line":24,"column":12,"nodeType":"202","messageId":"203","endLine":24,"endColumn":21},{"ruleId":"200","severity":1,"message":"263","line":10,"column":20,"nodeType":"202","messageId":"203","endLine":10,"endColumn":29},{"ruleId":"200","severity":1,"message":"264","line":10,"column":31,"nodeType":"202","messageId":"203","endLine":10,"endColumn":42},{"ruleId":"200","severity":1,"message":"265","line":11,"column":8,"nodeType":"202","messageId":"203","endLine":11,"endColumn":16},{"ruleId":"248","severity":1,"message":"266","line":54,"column":13,"nodeType":"250","messageId":"222","endLine":54,"endColumn":22},{"ruleId":"200","severity":1,"message":"267","line":68,"column":7,"nodeType":"202","messageId":"203","endLine":68,"endColumn":24},{"ruleId":"248","severity":1,"message":"268","line":108,"column":9,"nodeType":"250","messageId":"222","endLine":108,"endColumn":15},{"ruleId":"200","severity":1,"message":"269","line":123,"column":12,"nodeType":"202","messageId":"203","endLine":123,"endColumn":31},{"ruleId":"200","severity":1,"message":"270","line":124,"column":12,"nodeType":"202","messageId":"203","endLine":124,"endColumn":21},{"ruleId":"200","severity":1,"message":"271","line":124,"column":23,"nodeType":"202","messageId":"203","endLine":124,"endColumn":35},{"ruleId":"200","severity":1,"message":"272","line":125,"column":11,"nodeType":"202","messageId":"203","endLine":125,"endColumn":20},{"ruleId":"200","severity":1,"message":"273","line":127,"column":11,"nodeType":"202","messageId":"203","endLine":127,"endColumn":26},{"ruleId":"200","severity":1,"message":"231","line":2,"column":8,"nodeType":"202","messageId":"203","endLine":2,"endColumn":12},{"ruleId":"200","severity":1,"message":"209","line":7,"column":10,"nodeType":"202","messageId":"203","endLine":7,"endColumn":20},{"ruleId":"200","severity":1,"message":"263","line":9,"column":20,"nodeType":"202","messageId":"203","endLine":9,"endColumn":29},{"ruleId":"200","severity":1,"message":"264","line":9,"column":31,"nodeType":"202","messageId":"203","endLine":9,"endColumn":42},{"ruleId":"200","severity":1,"message":"274","line":9,"column":44,"nodeType":"202","messageId":"203","endLine":9,"endColumn":50},{"ruleId":"200","severity":1,"message":"265","line":10,"column":8,"nodeType":"202","messageId":"203","endLine":10,"endColumn":16},{"ruleId":"200","severity":1,"message":"275","line":92,"column":12,"nodeType":"202","messageId":"203","endLine":92,"endColumn":29},{"ruleId":"200","severity":1,"message":"276","line":92,"column":31,"nodeType":"202","messageId":"203","endLine":92,"endColumn":51},{"ruleId":"200","severity":1,"message":"273","line":95,"column":11,"nodeType":"202","messageId":"203","endLine":95,"endColumn":26},{"ruleId":"200","severity":1,"message":"263","line":10,"column":20,"nodeType":"202","messageId":"203","endLine":10,"endColumn":29},{"ruleId":"200","severity":1,"message":"265","line":11,"column":8,"nodeType":"202","messageId":"203","endLine":11,"endColumn":16},{"ruleId":"200","severity":1,"message":"277","line":201,"column":13,"nodeType":"202","messageId":"203","endLine":201,"endColumn":18},{"ruleId":"200","severity":1,"message":"278","line":201,"column":20,"nodeType":"202","messageId":"203","endLine":201,"endColumn":28},{"ruleId":"200","severity":1,"message":"279","line":206,"column":12,"nodeType":"202","messageId":"203","endLine":206,"endColumn":19},{"ruleId":"200","severity":1,"message":"280","line":208,"column":12,"nodeType":"202","messageId":"203","endLine":208,"endColumn":30},{"ruleId":"200","severity":1,"message":"281","line":208,"column":32,"nodeType":"202","messageId":"203","endLine":208,"endColumn":53},{"ruleId":"200","severity":1,"message":"273","line":224,"column":11,"nodeType":"202","messageId":"203","endLine":224,"endColumn":26},{"ruleId":"282","severity":1,"message":"283","line":484,"column":157,"nodeType":"284","endLine":484,"endColumn":170},{"ruleId":"200","severity":1,"message":"263","line":12,"column":10,"nodeType":"202","messageId":"203","endLine":12,"endColumn":19},{"ruleId":"200","severity":1,"message":"285","line":12,"column":21,"nodeType":"202","messageId":"203","endLine":12,"endColumn":29},{"ruleId":"200","severity":1,"message":"273","line":65,"column":11,"nodeType":"202","messageId":"203","endLine":65,"endColumn":26},{"ruleId":"200","severity":1,"message":"216","line":10,"column":19,"nodeType":"202","messageId":"203","endLine":10,"endColumn":25},{"ruleId":"200","severity":1,"message":"286","line":10,"column":27,"nodeType":"202","messageId":"203","endLine":10,"endColumn":33},{"ruleId":"200","severity":1,"message":"287","line":16,"column":26,"nodeType":"202","messageId":"203","endLine":16,"endColumn":39},{"ruleId":"200","severity":1,"message":"288","line":67,"column":7,"nodeType":"202","messageId":"203","endLine":67,"endColumn":11},{"ruleId":"200","severity":1,"message":"289","line":114,"column":7,"nodeType":"202","messageId":"203","endLine":114,"endColumn":14},{"ruleId":"200","severity":1,"message":"290","line":132,"column":10,"nodeType":"202","messageId":"203","endLine":132,"endColumn":19},{"ruleId":"200","severity":1,"message":"291","line":132,"column":21,"nodeType":"202","messageId":"203","endLine":132,"endColumn":33},{"ruleId":"200","severity":1,"message":"273","line":136,"column":9,"nodeType":"202","messageId":"203","endLine":136,"endColumn":24},{"ruleId":"200","severity":1,"message":"292","line":13,"column":10,"nodeType":"202","messageId":"203","endLine":13,"endColumn":20},{"ruleId":"200","severity":1,"message":"293","line":36,"column":7,"nodeType":"202","messageId":"203","endLine":36,"endColumn":13},{"ruleId":"200","severity":1,"message":"294","line":37,"column":7,"nodeType":"202","messageId":"203","endLine":37,"endColumn":13},{"ruleId":"200","severity":1,"message":"295","line":49,"column":11,"nodeType":"202","messageId":"203","endLine":49,"endColumn":15},"no-unused-vars","'Provider' is defined but never used.","Identifier","unusedVar","'withStyles' is defined but never used.","no-native-reassign",["296"],"no-negated-in-lhs",["297"],"'makeStyles' is defined but never used.","'CollectorDashboard' is defined but never used.","'Router' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'ROLL_NUMBER' is defined but never used.","'theme' is defined but never used.","'pxToVh' is defined but never used.","'InputBase' is defined but never used.","'OutlinedInput' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Paper' is defined but never used.","'classes' is assigned a value but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'Icon' is defined but never used.","'Grid' is defined but never used.","'pxToRem' is defined but never used.","react/jsx-pascal-case","Imported JSX component Grid_Header must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'Theme' is defined but never used.","'createStyles' is defined but never used.","'Button' is defined but never used.","'EditIcon' is defined but never used.","'RemoveIcon' is defined but never used.","'AddIcon' is defined but never used.","'SearchIcon' is defined but never used.","'TextField' is defined but never used.","'InputAdornment' is defined but never used.","'red' is defined but never used.","Imported JSX component Grid_Table_Area must be in PascalCase or SCREAMING_SNAKE_CASE","'ViewCorrospondancePopUp' is defined but never used.","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","'StyledInput' is assigned a value but never used.","'checked' is assigned a value but never used.","'setChecked' is assigned a value but never used.","'recordForEdit' is assigned a value but never used.","'setRecordForEdit' is assigned a value but never used.","'searchValue' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'data' and 'tableData'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setTableData' needs the current value of 'data'.","ArrayExpression",["298"],"'MyPopUp' is defined but never used.","'openPopup' is assigned a value but never used.","'useEffect' is defined but never used.","'useCallback' is defined but never used.","'Snackbar' is defined but never used.","Duplicate key 'contained'.","'themeCancelButton' is assigned a value but never used.","Duplicate key 'margin'.","'isSaveButtonPressed' is assigned a value but never used.","'isSending' is assigned a value but never used.","'setIsSending' is assigned a value but never used.","'isMounted' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","'useRef' is defined but never used.","'deleteButtonPress' is assigned a value but never used.","'setDeleteButtonPress' is assigned a value but never used.","'title' is assigned a value but never used.","'children' is assigned a value but never used.","'dueDate' is assigned a value but never used.","'isAddButtonPressed' is assigned a value but never used.","'setIsAddButtonPressed' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'useState' is defined but never used.","'pxToVw' is defined but never used.","'ThemeProvider' is defined but never used.","'rows' is assigned a value but never used.","'themeVc' is assigned a value but never used.","'addAmount' is assigned a value but never used.","'setAddAmount' is assigned a value but never used.","'createData' is defined but never used.","'header' is assigned a value but never used.","'myhtml' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"299","fix":"300"},"Update the dependencies array to be: [data, searchResults, tableData]",{"range":"301","text":"302"},[29544,29559],"[data, searchResults, tableData]"]